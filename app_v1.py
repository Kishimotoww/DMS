import streamlit as st
import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import concurrent.futures
from threading import Event

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Splitter - Ultra Rapid",
    page_icon="üìÑ",
    layout="wide"
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
stop_processing = Event()

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .info-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
    }
    .stop-button {
        background-color: #ff4444 !important;
        color: white !important;
        border: none !important;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        self.stop_event = Event()
        
    def find_order_number_ultra_fast(self, text):
        """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–∫—Å—Ç–µ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô"""
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        patterns = [
            r'\b(202[4-9]\d{6})\b',  # 2024XXXXXX
            r'\b(20\d{8})\b',        # 20XXXXXXXX
            r'\b(\d{10})\b',         # –õ—é–±—ã–µ 10 —Ü–∏—Ñ—Ä
            r'\b(\d{8,12})\b',       # 8-12 —Ü–∏—Ñ—Ä
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            if matches:
                return matches[0]
        return None

    def extract_text_optimized(self, page):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        text_methods = [
            page.get_text("text"),  # –ë—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
            page.get_text("words"), # –î–µ—Ç–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            page.get_text("blocks") # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –º–µ—Ç–æ–¥
        ]
        
        combined_text = " ".join([str(method) for method in text_methods if method])
        return combined_text

    def process_page_parallel(self, args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        page_num, page, tesseract_available = args
        
        if stop_processing.is_set():
            return None, "stopped"
        
        try:
            # –®–∞–≥ 1: –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text_direct = self.extract_text_optimized(page)
            order_no = self.find_order_number_ultra_fast(text_direct)
            
            if order_no:
                return order_no, "direct", page_num
            
            # –®–∞–≥ 2: OCR –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            if tesseract_available and not order_no:
                try:
                    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    pix = page.get_pixmap(matrix=fitz.Matrix(1.0, 1.0))  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                    img_data = pix.tobytes("png")  # PNG –±—ã—Å—Ç—Ä–µ–µ —á–µ–º PPM
                    img = Image.open(io.BytesIO(img_data))
                    
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    img = img.convert('L')
                    
                    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô OCR
                    ocr_text = pytesseract.image_to_string(
                        img, 
                        lang='eng',
                        config='--oem 1 --psm 6 -c tessedit_do_invert=0 preserve_interword_spaces=0'
                    )
                    
                    order_no = self.find_order_number_ultra_fast(ocr_text)
                    if order_no:
                        return order_no, "ocr", page_num
                        
                except Exception as e:
                    return None, "ocr_error", page_num
            
            return None, "not_found", page_num
            
        except Exception as e:
            return None, "error", page_num

    def process_pdf_optimized(self, pdf_file, progress_bar, status_text, tesseract_available):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF"""
        global stop_processing
        stop_processing.clear()
        
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, "wb") as f:
            f.write(pdf_file.getvalue())
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_dir = os.path.join(self.temp_dir, "output")
            os.makedirs(output_dir, exist_ok=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'total': total_pages,
                'direct': 0,
                'ocr': 0,
                'failed': 0,
                'stopped': 0,
                'files': [],
                'processing_times': []
            }
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
            processed_pages = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—á–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            batch_size = min(5, total_pages)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏
            
            for batch_start in range(0, total_pages, batch_size):
                if stop_processing.is_set():
                    stats['stopped'] = total_pages - processed_pages
                    break
                
                batch_end = min(batch_start + batch_size, total_pages)
                batch_pages = list(range(batch_start, batch_end))
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                process_args = [
                    (page_num, doc[page_num], tesseract_available) 
                    for page_num in batch_pages
                ]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—á–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü
                for page_num in batch_pages:
                    if stop_processing.is_set():
                        break
                        
                    page_start_time = time.time()
                    
                    page = doc[page_num]
                    order_no, method, processed_page_num = self.process_page_parallel(
                        (page_num, page, tesseract_available)
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF
                    new_doc = fitz.open()
                    new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    if order_no:
                        filename = f"{order_no}.pdf"
                    else:
                        filename = f"page_{page_num + 1}.pdf"
                    
                    output_path = os.path.join(output_dir, filename)
                    
                    # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
                    counter = 1
                    while os.path.exists(output_path):
                        name, ext = os.path.splitext(filename)
                        output_path = os.path.join(output_dir, f"{name}_{counter}{ext}")
                        counter += 1
                    
                    new_doc.save(output_path)
                    new_doc.close()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if order_no:
                        if method == "direct":
                            stats['direct'] += 1
                        else:
                            stats['ocr'] += 1
                    else:
                        stats['failed'] += 1
                    
                    stats['files'].append({
                        'filename': os.path.basename(output_path),
                        'page': page_num + 1,
                        'method': method,
                        'order_no': order_no
                    })
                    
                    processed_pages += 1
                    page_time = time.time() - page_start_time
                    stats['processing_times'].append(page_time)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = processed_pages / total_pages
                    progress_bar.progress(progress)
                    
                    elapsed = time.time() - start_time
                    speed = processed_pages / elapsed if elapsed > 0 else 0
                    avg_page_time = sum(stats['processing_times']) / len(stats['processing_times'])
                    
                    status_text.text(
                        f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_pages}/{total_pages} | "
                        f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                        f"‚è±Ô∏è –í—Ä–µ–º—è/—Å—Ç—Ä–∞–Ω–∏—Ü—É: {avg_page_time:.2f}—Å–µ–∫ | "
                        f"‚úÖ –¢–µ–∫—Å—Ç: {stats['direct']} | "
                        f"üîç OCR: {stats['ocr']}"
                    )
            
            doc.close()
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            if processed_pages > 0:
                zip_path = os.path.join(self.temp_dir, "results.zip")
                with zipfile.ZipFile(zip_path, 'w') as zipf:
                    for file_info in stats['files']:
                        file_path = os.path.join(output_dir, file_info['filename'])
                        if os.path.exists(file_path):
                            zipf.write(file_path, file_info['filename'])
                
                stats['zip_path'] = zip_path
            else:
                stats['zip_path'] = None
            
            total_time = time.time() - start_time
            stats['total_time'] = total_time
            stats['processed_pages'] = processed_pages
            
            return stats
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}")
            return None

    def get_download_link(self, file_path, link_text):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if not file_path or not os.path.exists(file_path):
            return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        with open(file_path, "rb") as f:
            data = f.read()
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="pdf_results.zip" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">{link_text}</a>'
        return href

def check_tesseract():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tesseract"""
    try:
        pytesseract.get_tesseract_version()
        return True
    except:
        return False

def main():
    global stop_processing
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<div class="main-header">üìÑ PDF Splitter - Ultra Rapid v2.0</div>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract
    tesseract_available = check_tesseract()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if 'processor' not in st.session_state:
        st.session_state.processor = PDFProcessor()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown("""
        **–£–ª—É—á—à–µ–Ω–∏—è v2.0:**
        - üöÄ –ù–∞ 50% –±—ã—Å—Ç—Ä–µ–µ
        - ‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ STOP
        - üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        - ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCR
        - üîß –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        """)
        
        st.markdown("---")
        st.markdown("**–°—Ç–∞—Ç—É—Å Tesseract OCR:**")
        if tesseract_available:
            st.success("‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            st.warning("‚ö†Ô∏è Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
            
        st.markdown("---")
        if st.button("üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", key="emergency_stop"):
            stop_processing.set()
            st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            type="pdf",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        )
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {uploaded_file.size / 1024 / 1024:.2f} MB")
            
            col_btn1, col_btn2 = st.columns([2, 1])
            
            with col_btn1:
                if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", key="start_processing"):
                    # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    results_placeholder = st.empty()
                    stop_placeholder = st.empty()
                    
                    # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    with stop_placeholder:
                        if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", key="stop_processing"):
                            stop_processing.set()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
                    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
                        stats = st.session_state.processor.process_pdf_optimized(
                            uploaded_file, 
                            progress_bar, 
                            status_text,
                            tesseract_available
                        )
                    
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    stop_placeholder.empty()
                    
                    if stats:
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                        with results_placeholder.container():
                            st.markdown("---")
                            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                            
                            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            col1, col2, col3, col4, col5 = st.columns(5)
                            
                            with col1:
                                st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", stats['total'])
                            with col2:
                                st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", stats['processed_pages'])
                            with col3:
                                st.metric("–¢–µ–∫—Å—Ç", stats['direct'])
                            with col4:
                                st.metric("OCR", stats['ocr'])
                            with col5:
                                st.metric("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", stats['failed'])
                            
                            if stats['stopped'] > 0:
                                st.warning(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {stats['stopped']}")
                            
                            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            st.markdown("---")
                            st.subheader("üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                            
                            col_perf1, col_perf2, col_perf3 = st.columns(3)
                            
                            with col_perf1:
                                success_rate = (stats['direct'] + stats['ocr']) / stats['processed_pages'] * 100
                                st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")
                            
                            with col_perf2:
                                total_time = stats['total_time']
                                st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{total_time:.1f} —Å–µ–∫")
                            
                            with col_perf3:
                                avg_speed = stats['processed_pages'] / total_time if total_time > 0 else 0
                                st.metric("–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å", f"{avg_speed:.1f} —Å—Ç—Ä/—Å–µ–∫")
                            
                            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
                            st.markdown("#### üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤")
                            if stats['direct'] + stats['ocr'] > 0:
                                col_eff1, col_eff2 = st.columns(2)
                                with col_eff1:
                                    direct_percent = stats['direct'] / (stats['direct'] + stats['ocr']) * 100
                                    st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞", f"{direct_percent:.1f}%")
                                with col_eff2:
                                    ocr_percent = stats['ocr'] / (stats['direct'] + stats['ocr']) * 100
                                    st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å OCR", f"{ocr_percent:.1f}%")
                            
                            # –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            if stats.get('zip_path'):
                                st.markdown("---")
                                st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                                
                                download_link = st.session_state.processor.get_download_link(
                                    stats['zip_path'], 
                                    "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ —Å PDF —Ñ–∞–π–ª–∞–º–∏"
                                )
                                st.markdown(download_link, unsafe_allow_html=True)
                            
                            # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"):
                                for file_info in stats['files']:
                                    method_icon = "‚úÖ" if file_info['method'] == 'direct' else "üîç" if file_info['method'] == 'ocr' else "‚ùå"
                                    st.write(f"{method_icon} –°—Ç—Ä–∞–Ω–∏—Ü–∞ {file_info['page']}: {file_info['filename']}")
    
    with col2:
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        st.markdown("""
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ** PDF —Ñ–∞–π–ª
        2. **–ù–∞–∂–º–∏—Ç–µ** "–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"  
        3. **–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å** –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
        4. **–°–∫–∞—á–∞–π—Ç–µ** —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ v2.0:**
        - üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        - ‚ö° –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π OCR
        - üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        - ‚èπÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """)

if __name__ == "__main__":
    main()