import streamlit as st
import fitz
import pytesseract
from PIL import Image
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import json
from datetime import datetime
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Auto Assistant - Manual Mode", 
    page_icon="üéì",
    layout="wide"
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract
def setup_tesseract():
    try:
        import subprocess
        result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)
        if result.returncode == 0:
            tesseract_path = result.stdout.strip()
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            return True
    except:
        pass
    
    try:
        install_cmd = "apt-get update && apt-get install -y tesseract-ocr tesseract-ocr-eng"
        result = subprocess.run(install_cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            return True
    except:
        pass
    
    return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'tesseract_checked' not in st.session_state:
    st.session_state.tesseract_available = setup_tesseract()
    st.session_state.tesseract_checked = True

tesseract_available = st.session_state.tesseract_available

# –ö–ª–∞—Å—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
class ManualAssistant:
    def __init__(self):
        self.workflows_file = "workflows.json"
        self.load_workflows()
    
    def load_workflows(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            if os.path.exists(self.workflows_file):
                with open(self.workflows_file, 'r', encoding='utf-8') as f:
                    self.workflows = json.load(f)
            else:
                self.workflows = {}
        except:
            self.workflows = {}
    
    def save_workflows(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            with open(self.workflows_file, 'w', encoding='utf-8') as f:
                json.dump(self.workflows, f, ensure_ascii=False, indent=2)
            return True
        except:
            return False
    
    def create_workflow(self, workflow_name, steps):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.workflows[workflow_name] = {
            'steps': steps,
            'created': datetime.now().isoformat(),
            'total_steps': len(steps)
        }
        self.save_workflows()
        return True
    
    def generate_manual_guide(self, workflow_name, order_numbers):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if workflow_name not in self.workflows:
            return None
        
        guide = {
            'workflow_name': workflow_name,
            'total_files': len(order_numbers),
            'completion_time': len(order_numbers) * 2,
            'instructions': [],
            'generated_at': datetime.now().isoformat()
        }
        
        for i, order_number in enumerate(order_numbers):
            file_guide = {
                'file_number': i + 1,
                'order_number': order_number,
                'steps': []
            }
            
            for step in self.workflows[workflow_name]['steps']:
                step_copy = step.copy()
                if 'text_to_type' in step_copy:
                    step_copy['text_to_type'] = step_copy['text_to_type'].replace('{ORDER_NUMBER}', order_number)
                file_guide['steps'].append(step_copy)
            
            guide['instructions'].append(file_guide)
        
        return guide

# –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        
    def find_order_numbers(self, text):
        """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        patterns = [
            r'\b(202[4-9]\d{6})\b',
            r'\b(20\d{8})\b', 
            r'\b(\d{10})\b',
            r'\b(\d{8,12})\b',
            r'\b(ORDER[:\\s]*)(\d{8,12})\b',
            r'\b(‚Ññ[:\\s]*)(\d{8,12})\b',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                if isinstance(matches[0], tuple):
                    for match in matches[0]:
                        if match and match.isdigit():
                            return match
                else:
                    return matches[0]
        return None
    
    def extract_text_comprehensive(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            text_methods = []
            
            text_raw = page.get_text("text")
            if text_raw and len(text_raw.strip()) > 5:
                text_methods.append(text_raw)
            
            words = page.get_text("words")
            if words:
                text_words = " ".join([word[4] for word in words if len(word) > 4 and word[4].strip()])
                text_methods.append(text_words)
            
            return " ".join(text_methods)
        except:
            return ""
    
    def process_pdf(self, pdf_file, progress_bar, status_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤"""
        start_time = time.time()
        
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, 'wb') as f:
            f.write(pdf_file.getvalue())
        
        try:
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            results = {
                'total_pages': total_pages,
                'files': [],
                'processing_time': 0,
                'output_dir': os.path.join(self.temp_dir, "output")
            }
            
            os.makedirs(results['output_dir'], exist_ok=True)
            
            for page_num in range(total_pages):
                page = doc[page_num]
                
                text = self.extract_text_comprehensive(page)
                order_no = self.find_order_numbers(text)
                
                if not order_no and tesseract_available:
                    try:
                        pix = page.get_pixmap(matrix=fitz.Matrix(1.5, 1.5))
                        img_data = pix.tobytes("png")
                        img = Image.open(io.BytesIO(img_data))
                        img = img.convert('L')
                        
                        ocr_text = pytesseract.image_to_string(img, lang='eng')
                        order_no = self.find_order_numbers(ocr_text)
                    except:
                        pass
                
                new_doc = fitz.open()
                new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                
                filename = f"{order_no}.pdf" if order_no else f"page_{page_num + 1}.pdf"
                output_path = os.path.join(results['output_dir'], filename)
                
                counter = 1
                base_name = os.path.splitext(filename)[0]
                while os.path.exists(output_path):
                    output_path = os.path.join(results['output_dir'], f"{base_name}_{counter}.pdf")
                    counter += 1
                
                new_doc.save(output_path)
                new_doc.close()
                
                file_info = {
                    'filename': os.path.basename(output_path),
                    'page_number': page_num + 1,
                    'order_number': order_no,
                    'file_path': output_path,
                    'status': 'has_number' if order_no else 'no_number'
                }
                
                results['files'].append(file_info)
                
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                
                elapsed = time.time() - start_time
                speed = (page_num + 1) / elapsed if elapsed > 0 else 0
                
                found_count = len([f for f in results['files'] if f['order_number']])
                
                status_text.text(
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {page_num + 1}/{total_pages} | "
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                    f"‚úÖ –° –Ω–æ–º–µ—Ä–∞–º–∏: {found_count} | "
                    f"‚ùå –ë–µ–∑ –Ω–æ–º–µ—Ä–æ–≤: {page_num + 1 - found_count}"
                )
            
            doc.close()
            results['processing_time'] = time.time() - start_time
            
            return results
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'processor' not in st.session_state:
    st.session_state.processor = PDFProcessor()

if 'assistant' not in st.session_state:
    st.session_state.assistant = ManualAssistant()

if 'processed_results' not in st.session_state:
    st.session_state.processed_results = None

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .guide-box {
        background-color: #f0f8ff;
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #4ECDC4;
        margin: 10px 0;
    }
    .step-box {
        background-color: #fff;
        padding: 15px;
        margin: 10px 0;
        border-radius: 8px;
        border-left: 4px solid #667eea;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .current-step {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
    }
    .file-header {
        background-color: #e8f4fd;
        padding: 15px;
        border-radius: 8px;
        margin: 15px 0;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if 'confirmed_files' not in st.session_state:
        st.session_state.confirmed_files = []
    if 'current_file_index' not in st.session_state:
        st.session_state.current_file_index = 0
    if 'current_step_index' not in st.session_state:
        st.session_state.current_step_index = 0
    if 'edited_files' not in st.session_state:
        st.session_state.edited_files = []
    
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
        
    st.markdown('<div class="main-header">üéì PDF Manual Assistant - No Installation Needed</div>', unsafe_allow_html=True)
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF", "üéì –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞", "üë®‚Äçüíª –†—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"])
    
with tab1:
    st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤")
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf")
    
    if uploaded_file is not None:
        st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
        
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É PDF", type="primary", use_container_width=True):
            progress_bar = st.progress(0)
            status_text = st.empty()
            results_placeholder = st.empty()
            
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
                results = st.session_state.processor.process_pdf(
                    uploaded_file, progress_bar, status_text
                )
            
            if results:
                st.session_state.processed_results = results
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                st.session_state.confirmed_files = []
                st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if st.session_state.processed_results:
        results = st.session_state.processed_results
        
        with st.container():
            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            files_with_numbers = [f for f in results['files'] if f['order_number']]
            files_without_numbers = [f for f in results['files'] if not f['order_number']]
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", results['total_pages'])
            col2.metric("–° –Ω–æ–º–µ—Ä–∞–º–∏", len(files_with_numbers))
            col3.metric("–ë–µ–∑ –Ω–æ–º–µ—Ä–æ–≤", len(files_without_numbers))
            col4.metric("–í—Ä–µ–º—è", f"{results['processing_time']:.1f}—Å")
            
            # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            st.markdown("---")
            st.subheader("‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤")
            st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
            if 'edited_files' not in st.session_state:
                st.session_state.edited_files = results['files'].copy()
            
            confirmed_files = st.session_state.get('confirmed_files', [])
            
            for i, file_info in enumerate(st.session_state.edited_files):
                if file_info['order_number']:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏
                    col_a, col_b, col_c = st.columns([2, 2, 1])
                    with col_a:
                        st.write(f"**{file_info['filename']}**")
                        st.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {file_info['page_number']}")
                    with col_b:
                        # –ü–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
                        new_number = st.text_input(
                            "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", 
                            value=file_info['order_number'], 
                            key=f"num_{file_info['filename']}",
                            label_visibility="visible"
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
                        st.session_state.edited_files[i]['order_number'] = new_number
                    with col_c:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
                        is_confirmed = any(f['filename'] == file_info['filename'] for f in confirmed_files)
                        
                        if is_confirmed:
                            st.success("‚úì")
                        else:
                            if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", key=f"ok_{file_info['filename']}"):
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∫–∞–º–∏) –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
                                confirmed_files.append(st.session_state.edited_files[i])
                                st.session_state.confirmed_files = confirmed_files
                                st.rerun()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
            if confirmed_files:
                st.success(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(confirmed_files)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
                    for cf in confirmed_files:
                        st.write(f"- {cf['filename']}: {cf['order_number']}")
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                col_reset, col_refresh = st.columns(2)
                with col_reset:
                    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", type="secondary"):
                        st.session_state.confirmed_files = []
                        st.rerun()
                with col_refresh:
                    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", type="secondary"):
                        st.rerun()
    
    with tab2:
        st.subheader("üéì –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        st.info("""
        **–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.**
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.
        """)
        
        workflow_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞", value="–û–±—Ä–∞–±–æ—Ç–∫–∞_–∑–∞–∫–∞–∑–æ–≤_RDS")
        
        st.markdown("### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–æ–≤
        step_type = st.selectbox("–¢–∏–ø —à–∞–≥–∞", 
                               ["click", "type", "wait", "hotkey", "focus", "select", "button"])
        
        step_description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞", placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ?")
        
        step_params = {}
        if step_type == "click":
            step_params['action'] = "–ö–ª–∏–∫–Ω—É—Ç—å"
            step_params['location'] = st.text_input("–ì–¥–µ –∫–ª–∏–∫–Ω—É—Ç—å?", placeholder="–í –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞")
        
        elif step_type == "type":
            step_params['action'] = "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç"
            text_to_type = st.text_input("–¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞", value="{ORDER_NUMBER}")
            step_params['text_to_type'] = text_to_type
            step_params['location'] = st.text_input("–ö—É–¥–∞ –≤–≤–æ–¥–∏—Ç—å?", placeholder="–í –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞")
        
        elif step_type == "wait":
            step_params['action'] = "–ü–æ–¥–æ–∂–¥–∞—Ç—å"
            seconds = st.number_input("–°–µ–∫—É–Ω–¥—ã", min_value=1, value=2)
            step_params['duration'] = f"{seconds} —Å–µ–∫—É–Ω–¥"
        
        elif step_type == "hotkey":
            step_params['action'] = "–ù–∞–∂–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à"
            step_params['keys'] = st.text_input("–ö–ª–∞–≤–∏—à–∏", value="Ctrl+V", placeholder="Ctrl+V, Enter, Tab...")
        
        elif step_type == "focus":
            step_params['action'] = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–ª–µ"
            step_params['location'] = st.text_input("–ö–∞–∫–æ–µ –ø–æ–ª–µ?", placeholder="–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞")
        
        elif step_type == "select":
            step_params['action'] = "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"
            step_params['location'] = st.text_input("–ö–∞–∫–æ–π —Å–ø–∏—Å–æ–∫?", placeholder="–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–∞")
        
        elif step_type == "button":
            step_params['action'] = "–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É"
            step_params['location'] = st.text_input("–ö–∞–∫—É—é –∫–Ω–æ–ø–∫—É?", placeholder="–ö–Ω–æ–ø–∫–∞ '–ü–æ–∏—Å–∫', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'")
        
        # –ü—Ä–µ–≤—å—é —à–∞–≥–æ–≤
        if 'workflow_steps' not in st.session_state:
            st.session_state.workflow_steps = []
        
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥", type="primary") and step_description:
            step = {
                'type': step_type,
                'description': step_description,
                **step_params
            }
            st.session_state.workflow_steps.append(step)
            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —à–∞–≥: {step_description}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —à–∞–≥–∏
        if st.session_state.workflow_steps:
            st.markdown("### –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å:")
            for i, step in enumerate(st.session_state.workflow_steps, 1):
                st.markdown(f'<div class="step-box">', unsafe_allow_html=True)
                st.write(f"**–®–∞–≥ {i}: {step['description']}**")
                st.write(f"**–î–µ–π—Å—Ç–≤–∏–µ:** {step['action']}")
                if 'location' in step:
                    st.write(f"**–ú–µ—Å—Ç–æ:** {step['location']}")
                if 'text_to_type' in step:
                    st.write(f"**–¢–µ–∫—Å—Ç:** `{step['text_to_type']}`")
                if 'duration' in step:
                    st.write(f"**–í—Ä–µ–º—è:** {step['duration']}")
                if 'keys' in step:
                    st.write(f"**–ö–ª–∞–≤–∏—à–∏:** {step['keys']}")
                st.markdown('</div>', unsafe_allow_html=True)
            
            col_save, col_clear = st.columns(2)
            with col_save:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", type="secondary", use_container_width=True):
                    if st.session_state.assistant.create_workflow(workflow_name, st.session_state.workflow_steps):
                        st.success(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å '{workflow_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            with col_clear:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —à–∞–≥–∏", type="secondary", use_container_width=True):
                    st.session_state.workflow_steps = []
                    st.rerun()
    
    with tab3:
     st.subheader("üë®‚Äçüíª –†—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏")
    
    if not st.session_state.processed_results:
        st.info("üìù –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ PDF —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF'")
    elif not st.session_state.assistant.workflows:
        st.info("üéì –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞'")
        else:
        confirmed_files = st.session_state.get('confirmed_files', [])
        if not confirmed_files:
            st.warning("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF'")
            st.info("""
            **–ö–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–∞–π–ª—ã:**
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF"
            2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
            4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É
            """)
            if st.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", key="check_confirmed"):
                st.rerun()
        else:
                    order_numbers = [f['order_number'] for f in confirmed_files]
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
                    guide = st.session_state.assistant.generate_manual_guide(
                        selected_workflow, order_numbers
                    )
                    
                    if guide:
                        st.markdown(f'<div class="guide-box">', unsafe_allow_html=True)
                        st.subheader("üìã –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
                        st.write(f"**–ü—Ä–æ—Ü–µ—Å—Å:** {guide['workflow_name']}")
                        st.write(f"**–§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {guide['total_files']}")
                        st.write(f"**–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** {guide['completion_time']} –º–∏–Ω—É—Ç")
                        st.write(f"**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** {datetime.fromisoformat(guide['generated_at']).strftime('%d.%m.%Y %H:%M')}")
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                        st.markdown("### –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
                        
                        current_file_index = st.session_state.current_file_index
                        current_step_index = st.session_state.current_step_index
                        
                        if current_file_index < len(guide['instructions']):
                            current_file = guide['instructions'][current_file_index]
                            
                            st.markdown(f'<div class="file-header">', unsafe_allow_html=True)
                            st.subheader(f"üìÑ –§–∞–π–ª {current_file['file_number']} –∏–∑ {len(guide['instructions'])}")
                            st.write(f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** {current_file['order_number']}")
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                            for i, step in enumerate(current_file['steps']):
                                step_class = "current-step" if i == current_step_index else "step-box"
                                st.markdown(f'<div class="{step_class}">', unsafe_allow_html=True)
                                
                                # –ù–æ–º–µ—Ä —à–∞–≥–∞ –∏ —Å—Ç–∞—Ç—É—Å
                                status = "üü¢ –¢–ï–ö–£–©–ò–ô –®–ê–ì" if i == current_step_index else "‚ö™"
                                st.write(f"**{status} –®–∞–≥ {i+1}: {step['description']}**")
                                
                                # –î–µ—Ç–∞–ª–∏ —à–∞–≥–∞
                                st.write(f"**–î–µ–π—Å—Ç–≤–∏–µ:** {step['action']}")
                                if 'location' in step:
                                    st.write(f"**–ú–µ—Å—Ç–æ:** {step['location']}")
                                if 'text_to_type' in step and 'text_to_type' in step:
                                    display_text = step['text_to_type'].replace('{ORDER_NUMBER}', current_file['order_number'])
                                    st.write(f"**–¢–µ–∫—Å—Ç:** `{display_text}`")
                                if 'duration' in step:
                                    st.write(f"**–í—Ä–µ–º—è:** {step['duration']}")
                                if 'keys' in step:
                                    st.write(f"**–ö–ª–∞–≤–∏—à–∏:** {step['keys']}")
                                
                                st.markdown('</div>', unsafe_allow_html=True)
                            
                            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                            st.markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º:")
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                if st.button("‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥", use_container_width=True) and current_step_index > 0:
                                    st.session_state.current_step_index -= 1
                                    st.rerun()
                            
                            with col2:
                                if st.button("‚úÖ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω", type="primary", use_container_width=True):
                                    if current_step_index < len(current_file['steps']) - 1:
                                        st.session_state.current_step_index += 1
                                        st.success("‚úì –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                                        st.rerun()
                                    else:
                                        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É
                                        if current_file_index < len(guide['instructions']) - 1:
                                            st.session_state.current_file_index += 1
                                            st.session_state.current_step_index = 0
                                            st.success("üéâ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...")
                                            st.rerun()
                                        else:
                                            st.balloons()
                                            st.success("üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                            
                            with col3:
                                if st.button("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª", use_container_width=True):
                                    if current_file_index < len(guide['instructions']) - 1:
                                        st.session_state.current_file_index += 1
                                        st.session_state.current_step_index = 0
                                        st.rerun()
                                    else:
                                        st.info("üìù –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª")
                            
                            # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
                            st.markdown("#### –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è:")
                            nav_cols = st.columns(4)
                            with nav_cols[0]:
                                if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", use_container_width=True):
                                    st.session_state.current_file_index = 0
                                    st.session_state.current_step_index = 0
                                    st.rerun()
                            
                            # –ü—Ä–æ–≥—Ä–µ—Å—Å
                            total_steps = sum(len(f['steps']) for f in guide['instructions'])
                            completed_steps = sum(len(f['steps']) for f in guide['instructions'][:current_file_index]) + current_step_index
                            progress = completed_steps / total_steps if total_steps > 0 else 0
                            
                            st.progress(progress)
                            st.write(f"**–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** {completed_steps}/{total_steps} —à–∞–≥–æ–≤ ({progress:.1%})")
                        
                        else:
                            st.balloons()
                            st.success("üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
