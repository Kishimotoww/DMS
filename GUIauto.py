import streamlit as st
import fitz
import pytesseract
from PIL import Image
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import subprocess
import json
from datetime import datetime
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Auto Learner + Executor", 
    page_icon="üéì",
    layout="wide"
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract
@st.cache_resource
def setup_tesseract():
    try:
        result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)
        if result.returncode == 0:
            tesseract_path = result.stdout.strip()
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            return True
    except:
        pass
    
    try:
        install_cmd = "apt-get update && apt-get install -y tesseract-ocr tesseract-ocr-eng"
        result = subprocess.run(install_cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            return True
    except:
        pass
    
    return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'tesseract_checked' not in st.session_state:
    st.session_state.tesseract_available = setup_tesseract()
    st.session_state.tesseract_checked = True

tesseract_available = st.session_state.tesseract_available

# –ö–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
class ActionLearner:
    def __init__(self):
        self.learning_mode = False
        self.recorded_actions = []
        self.current_scenario = None
        self.scenarios_file = "saved_scenarios.json"
        self.is_executing = False
        self.load_scenarios()
    
    def load_scenarios(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        try:
            if os.path.exists(self.scenarios_file):
                with open(self.scenarios_file, 'r', encoding='utf-8') as f:
                    self.scenarios = json.load(f)
            else:
                self.scenarios = {}
        except:
            self.scenarios = {}
    
    def save_scenarios(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        try:
            with open(self.scenarios_file, 'w', encoding='utf-8') as f:
                json.dump(self.scenarios, f, ensure_ascii=False, indent=2)
            return True
        except:
            return False
    
    def start_learning(self, scenario_name):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        self.learning_mode = True
        self.recorded_actions = []
        self.current_scenario = scenario_name
        st.session_state.learning_active = True
        return True
    
    def stop_learning(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        self.learning_mode = False
        if self.current_scenario and self.recorded_actions:
            self.scenarios[self.current_scenario] = {
                'actions': self.recorded_actions.copy(),
                'created': datetime.now().isoformat(),
                'total_actions': len(self.recorded_actions)
            }
            self.save_scenarios()
            st.success(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π '{self.current_scenario}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –î–µ–π—Å—Ç–≤–∏–π: {len(self.recorded_actions)}")
        self.recorded_actions = []
        self.current_scenario = None
        st.session_state.learning_active = False
    
    def add_action(self, action_type, **params):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        if self.learning_mode:
            action = {
                'type': action_type,
                'timestamp': time.time(),
                **params
            }
            self.recorded_actions.append(action)
            return True
        return False
    
    def execute_scenario(self, scenario_name, order_number, progress_callback=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
        if scenario_name not in self.scenarios:
            return False, "–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        try:
            import pyautogui
            import pyperclip
        except ImportError:
            return False, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyautogui –∏ pyperclip –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
        
        self.is_executing = True
        successful_actions = 0
        total_actions = len(self.scenarios[scenario_name]['actions'])
        
        # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        pyperclip.copy(order_number)
        
        for i, action in enumerate(self.scenarios[scenario_name]['actions']):
            if not self.is_executing:
                break
                
            try:
                action_type = action['type']
                
                if action_type == 'click':
                    pyautogui.click(action['x'], action['y'])
                    successful_actions += 1
                    
                elif action_type == 'type':
                    # –ó–∞–º–µ–Ω—è–µ–º {ORDER_NUMBER} –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                    text = action['text'].replace('{ORDER_NUMBER}', order_number)
                    pyautogui.write(text)
                    successful_actions += 1
                    
                elif action_type == 'paste':
                    pyautogui.hotkey('ctrl', 'v')
                    successful_actions += 1
                    
                elif action_type == 'enter':
                    pyautogui.press('enter')
                    successful_actions += 1
                    
                elif action_type == 'wait':
                    time.sleep(action['seconds'])
                    successful_actions += 1
                
                elif action_type == 'keypress':
                    pyautogui.press(action['key'])
                    successful_actions += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if progress_callback:
                    progress_callback(i + 1, total_actions, f"–î–µ–π—Å—Ç–≤–∏–µ {i+1}/{total_actions}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                time.sleep(0.5)
                
            except Exception as e:
                return False, f"–û—à–∏–±–∫–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ {i+1}: {str(e)}"
        
        self.is_executing = False
        return True, f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {successful_actions}/{total_actions} –¥–µ–π—Å—Ç–≤–∏–π"
    
    def stop_execution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.is_executing = False

# –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        
    def find_order_numbers(self, text):
        """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        patterns = [
            r'\b(202[4-9]\d{6})\b',
            r'\b(20\d{8})\b', 
            r'\b(\d{10})\b',
            r'\b(\d{8,12})\b',
            r'\b(ORDER[:\\s]*)(\d{8,12})\b',
            r'\b(‚Ññ[:\\s]*)(\d{8,12})\b',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                if isinstance(matches[0], tuple):
                    for match in matches[0]:
                        if match and match.isdigit():
                            return match
                else:
                    return matches[0]
        return None
    
    def extract_text_comprehensive(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            text_methods = []
            
            text_raw = page.get_text("text")
            if text_raw and len(text_raw.strip()) > 5:
                text_methods.append(text_raw)
            
            words = page.get_text("words")
            if words:
                text_words = " ".join([word[4] for word in words if len(word) > 4 and word[4].strip()])
                text_methods.append(text_words)
            
            return " ".join(text_methods)
        except:
            return ""
    
    def process_pdf(self, pdf_file, progress_bar, status_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤"""
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, 'wb') as f:
            f.write(pdf_file.getvalue())
        
        try:
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            results = {
                'total_pages': total_pages,
                'files': [],
                'processing_time': 0,
                'output_dir': os.path.join(self.temp_dir, "output")
            }
            
            os.makedirs(results['output_dir'], exist_ok=True)
            
            for page_num in range(total_pages):
                page = doc[page_num]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                text = self.extract_text_comprehensive(page)
                order_no = self.find_order_numbers(text)
                
                # OCR –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
                if not order_no and tesseract_available:
                    try:
                        pix = page.get_pixmap(matrix=fitz.Matrix(1.5, 1.5))
                        img_data = pix.tobytes("png")
                        img = Image.open(io.BytesIO(img_data))
                        img = img.convert('L')
                        
                        ocr_text = pytesseract.image_to_string(img, lang='eng')
                        order_no = self.find_order_numbers(ocr_text)
                    except:
                        pass
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF
                new_doc = fitz.open()
                new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                
                filename = f"{order_no}.pdf" if order_no else f"page_{page_num + 1}.pdf"
                output_path = os.path.join(results['output_dir'], filename)
                
                # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                counter = 1
                base_name = os.path.splitext(filename)[0]
                while os.path.exists(output_path):
                    output_path = os.path.join(results['output_dir'], f"{base_name}_{counter}.pdf")
                    counter += 1
                
                new_doc.save(output_path)
                new_doc.close()
                
                file_info = {
                    'filename': os.path.basename(output_path),
                    'page_number': page_num + 1,
                    'order_number': order_no,
                    'file_path': output_path,
                    'status': 'has_number' if order_no else 'no_number'
                }
                
                results['files'].append(file_info)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                
                elapsed = time.time() - start_time
                speed = (page_num + 1) / elapsed if elapsed > 0 else 0
                
                found_count = len([f for f in results['files'] if f['order_number']])
                
                status_text.text(
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {page_num + 1}/{total_pages} | "
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                    f"‚úÖ –° –Ω–æ–º–µ—Ä–∞–º–∏: {found_count} | "
                    f"‚ùå –ë–µ–∑ –Ω–æ–º–µ—Ä–æ–≤: {page_num + 1 - found_count}"
                )
            
            doc.close()
            results['processing_time'] = time.time() - start_time
            
            return results
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'processor' not in st.session_state:
    st.session_state.processor = PDFProcessor()

if 'learner' not in st.session_state:
    st.session_state.learner = ActionLearner()

if 'processed_results' not in st.session_state:
    st.session_state.processed_results = None

if 'learning_active' not in st.session_state:
    st.session_state.learning_active = False

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .learning-mode {
        background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
        color: white;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
    }
    .file-card {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 8px;
        margin: 5px 0;
        border-left: 4px solid #28a745;
    }
    .file-card-warning {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
    }
</style>
""", unsafe_allow_html=True)

def main():
    st.markdown('<div class="main-header">üéì PDF Auto Learner + Executor</div>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    try:
        import pyautogui
        import pyperclip
        automation_available = True
    except ImportError:
        automation_available = False
        st.error("""
        ‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!
        
        –î–ª—è —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:
        ```bash
        pip install pyautogui pyperclip
        ```
        """)
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF", "üéì –û–±—É—á–µ–Ω–∏–µ", "üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫"])
    
    with tab1:
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤")
        
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf")
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            if st.button("üîÑ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É PDF", type="primary", use_container_width=True):
                progress_bar = st.progress(0)
                status_text = st.empty()
                results_placeholder = st.empty()
                
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
                    results = st.session_state.processor.process_pdf(
                        uploaded_file, progress_bar, status_text
                    )
                
                if results:
                    st.session_state.processed_results = results
                    
                    with results_placeholder.container():
                        st.markdown("---")
                        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        
                        files_with_numbers = [f for f in results['files'] if f['order_number']]
                        files_without_numbers = [f for f in results['files'] if not f['order_number']]
                        
                        col1, col2, col3, col4 = st.columns(4)
                        col1.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", results['total_pages'])
                        col2.metric("–° –Ω–æ–º–µ—Ä–∞–º–∏", len(files_with_numbers))
                        col3.metric("–ë–µ–∑ –Ω–æ–º–µ—Ä–æ–≤", len(files_without_numbers))
                        col4.metric("–í—Ä–µ–º—è", f"{results['processing_time']:.1f}—Å")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        st.markdown("---")
                        st.subheader("üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–æ–≤")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º")
                        
                        for file_info in results['files']:
                            if file_info['order_number']:
                                col_a, col_b, col_c = st.columns([3, 1, 1])
                                with col_a:
                                    st.markdown(f'<div class="file-card">', unsafe_allow_html=True)
                                    st.write(f"**{file_info['filename']}**")
                                    st.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {file_info['page_number']}")
                                    st.markdown('</div>', unsafe_allow_html=True)
                                with col_b:
                                    st.text_input("–ù–æ–º–µ—Ä", value=file_info['order_number'], key=f"num_{file_info['filename']}", label_visibility="collapsed")
                                with col_c:
                                    if st.button("‚úÖ", key=f"ok_{file_info['filename']}"):
                                        st.success(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {file_info['order_number']}")
    
    with tab2:
        st.subheader("üéì –û–±—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—é")
        
        if not automation_available:
            st.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
        else:
            col_learn1, col_learn2 = st.columns(2)
            
            with col_learn1:
                scenario_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", value="–ú–æ–π_—Å—Ü–µ–Ω–∞—Ä–∏–π")
                description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", placeholder="–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π?")
            
            with col_learn2:
                st.info("""
                **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–±—É—á–µ–Ω–∏—é:**
                1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                2. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"  
                3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –≤ –±—Ä–∞—É–∑–µ—Ä
                4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
                """)
            
            col_start, col_stop, col_info = st.columns([1, 1, 2])
            
            with col_start:
                if st.button("üé¨ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="primary", use_container_width=True) and scenario_name:
                    if st.session_state.learner.start_learning(scenario_name):
                        st.session_state.learning_active = True
                        st.success("üé• –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
            
            with col_stop:
                if st.button("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="secondary", use_container_width=True):
                    st.session_state.learner.stop_learning()
                    st.session_state.learning_active = False
            
            if st.session_state.learning_active:
                st.markdown('<div class="learning-mode">üé• –ò–î–ï–¢ –ó–ê–ü–ò–°–¨ –î–ï–ô–°–¢–í–ò–ô... –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ</div>', unsafe_allow_html=True)
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π
                st.markdown("### –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏:")
                col_act1, col_act2, col_act3, col_act4 = st.columns(4)
                
                with col_act1:
                    if st.button("üìã –ó–∞–ø–∏—Å–∞—Ç—å –≤—Å—Ç–∞–≤–∫—É", use_container_width=True):
                        st.session_state.learner.add_action('paste', description="–í—Å—Ç–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞")
                        st.success("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞")
                
                with col_act2:
                    if st.button("‚Üµ –ó–∞–ø–∏—Å–∞—Ç—å Enter", use_container_width=True):
                        st.session_state.learner.add_action('enter', description="–ù–∞–∂–∞—Ç–∏–µ Enter")
                        st.success("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –ù–∞–∂–∞—Ç–∏–µ Enter")
                
                with col_act3:
                    wait_seconds = st.number_input("–°–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è", min_value=1, max_value=10, value=2)
                    if st.button("‚è±Ô∏è –ó–∞–ø–∏—Å–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ", use_container_width=True):
                        st.session_state.learner.add_action('wait', seconds=wait_seconds, description=f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds}—Å–µ–∫")
                        st.success(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds}—Å–µ–∫")
                
                with col_act4:
                    key_to_press = st.selectbox("–ö–ª–∞–≤–∏—à–∞", ["tab", "space", "escape"])
                    if st.button("‚å®Ô∏è –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∞–≤–∏—à—É", use_container_width=True):
                        st.session_state.learner.add_action('keypress', key=key_to_press, description=f"–ù–∞–∂–∞—Ç–∏–µ {key_to_press}")
                        st.success(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –ù–∞–∂–∞—Ç–∏–µ {key_to_press}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            if st.session_state.learner.scenarios:
                st.markdown("---")
                st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                
                for name, scenario in st.session_state.learner.scenarios.items():
                    with st.expander(f"üìÅ {name} ({scenario['total_actions']} –¥–µ–π—Å—Ç–≤–∏–π)"):
                        st.write(f"–°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(scenario['created']).strftime('%d.%m.%Y %H:%M')}")
                        for i, action in enumerate(scenario['actions'], 1):
                            st.write(f"{i}. {action.get('description', '–î–µ–π—Å—Ç–≤–∏–µ')}")
    
    with tab3:
        st.subheader("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫")
        
        if not automation_available:
            st.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        elif not st.session_state.processed_results:
            st.info("üìù –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ PDF —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF'")
        elif not st.session_state.learner.scenarios:
            st.info("üéì –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—É—á–µ–Ω–∏–µ'")
        else:
            # –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_names = list(st.session_state.learner.scenarios.keys())
            selected_scenario = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π", scenario_names)
            
            if selected_scenario:
                scenario = st.session_state.learner.scenarios[selected_scenario]
                st.info(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π '{selected_scenario}': {scenario['total_actions']} –¥–µ–π—Å—Ç–≤–∏–π")
                
                # –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                files_to_process = [f for f in st.session_state.processed_results['files'] if f['order_number']]
                
                if files_to_process:
                    st.success(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(files_to_process)} —Ñ–∞–π–ª–æ–≤")
                    
                    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
                    with st.expander("üìã –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
                        for file_info in files_to_process:
                            st.write(f"‚Ä¢ {file_info['filename']}")
                    
                    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                    col_exec1, col_exec2 = st.columns([2, 1])
                    
                    with col_exec1:
                        if st.button("üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Æ", type="primary", use_container_width=True):
                            st.warning("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                            time.sleep(5)
                            
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            results_placeholder = st.empty()
                            
                            successful = 0
                            failed = 0
                            
                            for i, file_info in enumerate(files_to_process):
                                if not st.session_state.learner.is_executing:
                                    break
                                
                                order_number = file_info['order_number']
                                status_text.text(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(files_to_process)}: {order_number}")
                                
                                success, message = st.session_state.learner.execute_scenario(
                                    selected_scenario, 
                                    order_number,
                                    progress_callback=lambda curr, total, msg: status_text.text(f"{msg} - {order_number}")
                                )
                                
                                if success:
                                    successful += 1
                                    st.success(f"‚úÖ {order_number} - {message}")
                                else:
                                    failed += 1
                                    st.error(f"‚ùå {order_number} - {message}")
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                progress = (i + 1) / len(files_to_process)
                                progress_bar.progress(progress)
                                
                                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
                                time.sleep(2)
                            
                            progress_bar.empty()
                            status_text.empty()
                            
                            st.success(f"üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed}")
                    
                    with col_exec2:
                        if st.button("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨", type="secondary", use_container_width=True):
                            st.session_state.learner.stop_execution()
                            st.warning("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()
