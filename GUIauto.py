import streamlit as st
import fitz
import pytesseract
from PIL import Image
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import json
from datetime import datetime
import pandas as pd
import pyautogui
import keyboard
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Auto Assistant - Full Automation", 
    page_icon="ü§ñ",
    layout="wide"
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract
def setup_tesseract():
    try:
        import subprocess
        result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)
        if result.returncode == 0:
            tesseract_path = result.stdout.strip()
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            return True
    except:
        pass
    
    try:
        install_cmd = "apt-get update && apt-get install -y tesseract-ocr tesseract-ocr-eng"
        result = subprocess.run(install_cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            return True
    except:
        pass
    
    return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'tesseract_checked' not in st.session_state:
    st.session_state.tesseract_available = setup_tesseract()
    st.session_state.tesseract_checked = True

tesseract_available = st.session_state.tesseract_available

# –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
class AutoExecutor:
    def __init__(self):
        self.workflows_file = "auto_workflows.json"
        self.load_workflows()
        self.is_running = False
        self.current_task = None
    
    def load_workflows(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            if os.path.exists(self.workflows_file):
                with open(self.workflows_file, 'r', encoding='utf-8') as f:
                    self.workflows = json.load(f)
            else:
                self.workflows = {}
        except:
            self.workflows = {}
    
    def save_workflows(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            with open(self.workflows_file, 'w', encoding='utf-8') as f:
                json.dump(self.workflows, f, ensure_ascii=False, indent=2)
            return True
        except:
            return False
    
    def create_workflow(self, workflow_name, steps):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.workflows[workflow_name] = {
            'steps': steps,
            'created': datetime.now().isoformat(),
            'total_steps': len(steps)
        }
        self.save_workflows()
        return True
    
    def record_position(self, step_name):
        """–ó–∞–ø–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏"""
        st.info(f"üîπ –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –º–µ—Å—Ç–æ –¥–ª—è '{step_name}' –∏ –Ω–∞–∂–º–∏—Ç–µ F2")
        
        def on_key_event(e):
            if e.name == 'f2':
                x, y = pyautogui.position()
                st.session_state.recorded_positions[step_name] = (x, y)
                st.success(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: ({x}, {y})")
                return False
            return True
        
        keyboard.on_press_key('f2', on_key_event)
        return True
    
    def execute_step(self, step, order_number):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞"""
        try:
            if step['type'] == 'click':
                if step['location'] in st.session_state.recorded_positions:
                    x, y = st.session_state.recorded_positions[step['location']]
                    pyautogui.click(x, y)
                    time.sleep(0.5)
                    
            elif step['type'] == 'type':
                if step['location'] in st.session_state.recorded_positions:
                    x, y = st.session_state.recorded_positions[step['location']]
                    pyautogui.click(x, y)
                    time.sleep(0.2)
                    text_to_type = step['text_to_type'].replace('{ORDER_NUMBER}', order_number)
                    pyautogui.write(text_to_type, interval=0.05)
                    time.sleep(0.5)
                    
            elif step['type'] == 'wait':
                seconds = int(step['duration'].split()[0])
                time.sleep(seconds)
                
            elif step['type'] == 'hotkey':
                keys = step['keys'].lower()
                pyautogui.hotkey(*keys.split('+'))
                time.sleep(0.5)
                
            elif step['type'] == 'focus':
                if step['location'] in st.session_state.recorded_positions:
                    x, y = st.session_state.recorded_positions[step['location']]
                    pyautogui.click(x, y)
                    time.sleep(0.5)
                    
            elif step['type'] == 'button':
                if step['location'] in st.session_state.recorded_positions:
                    x, y = st.session_state.recorded_positions[step['location']]
                    pyautogui.click(x, y)
                    time.sleep(1)
            
            return True
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞: {str(e)}")
            return False
    
    def execute_workflow(self, workflow_name, order_numbers, progress_callback=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        if workflow_name not in self.workflows:
            return False
        
        self.is_running = True
        total_files = len(order_numbers)
        
        for i, order_number in enumerate(order_numbers):
            if not self.is_running:
                break
                
            self.current_task = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {order_number} ({i+1}/{total_files})"
            
            if progress_callback:
                progress_callback(i, total_files, self.current_task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞
            for step_num, step in enumerate(self.workflows[workflow_name]['steps']):
                if not self.is_running:
                    break
                    
                success = self.execute_step(step, order_number)
                if not success:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_num + 1}")
                    self.is_running = False
                    return False
                
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
        
        self.is_running = False
        self.current_task = None
        return True
    
    def stop_execution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.is_running = False

# –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        
    def find_order_numbers(self, text):
        """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        patterns = [
            r'\b(202[4-9]\d{6})\b',
            r'\b(20\d{8})\b', 
            r'\b(\d{10})\b',
            r'\b(\d{8,12})\b',
            r'\b(ORDER[:\\s]*)(\d{8,12})\b',
            r'\b(‚Ññ[:\\s]*)(\d{8,12})\b',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                if isinstance(matches[0], tuple):
                    for match in matches[0]:
                        if match and match.isdigit():
                            return match
                else:
                    return matches[0]
        return None
    
    def extract_text_comprehensive(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            text_methods = []
            
            text_raw = page.get_text("text")
            if text_raw and len(text_raw.strip()) > 5:
                text_methods.append(text_raw)
            
            words = page.get_text("words")
            if words:
                text_words = " ".join([word[4] for word in words if len(word) > 4 and word[4].strip()])
                text_methods.append(text_words)
            
            return " ".join(text_methods)
        except:
            return ""
    
    def process_pdf(self, pdf_file, progress_bar, status_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤"""
        start_time = time.time()
        
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, 'wb') as f:
            f.write(pdf_file.getvalue())
        
        try:
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            results = {
                'total_pages': total_pages,
                'files': [],
                'processing_time': 0,
                'output_dir': os.path.join(self.temp_dir, "output")
            }
            
            os.makedirs(results['output_dir'], exist_ok=True)
            
            for page_num in range(total_pages):
                page = doc[page_num]
                
                text = self.extract_text_comprehensive(page)
                order_no = self.find_order_numbers(text)
                
                if not order_no and tesseract_available:
                    try:
                        pix = page.get_pixmap(matrix=fitz.Matrix(1.5, 1.5))
                        img_data = pix.tobytes("png")
                        img = Image.open(io.BytesIO(img_data))
                        img = img.convert('L')
                        
                        ocr_text = pytesseract.image_to_string(img, lang='eng')
                        order_no = self.find_order_numbers(ocr_text)
                    except:
                        pass
                
                new_doc = fitz.open()
                new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                
                filename = f"{order_no}.pdf" if order_no else f"page_{page_num + 1}.pdf"
                output_path = os.path.join(results['output_dir'], filename)
                
                counter = 1
                base_name = os.path.splitext(filename)[0]
                while os.path.exists(output_path):
                    output_path = os.path.join(results['output_dir'], f"{base_name}_{counter}.pdf")
                    counter += 1
                
                new_doc.save(output_path)
                new_doc.close()
                
                file_info = {
                    'filename': os.path.basename(output_path),
                    'page_number': page_num + 1,
                    'order_number': order_no,
                    'file_path': output_path,
                    'status': 'has_number' if order_no else 'no_number'
                }
                
                results['files'].append(file_info)
                
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                
                elapsed = time.time() - start_time
                speed = (page_num + 1) / elapsed if elapsed > 0 else 0
                
                found_count = len([f for f in results['files'] if f['order_number']])
                
                status_text.text(
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {page_num + 1}/{total_pages} | "
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                    f"‚úÖ –° –Ω–æ–º–µ—Ä–∞–º–∏: {found_count} | "
                    f"‚ùå –ë–µ–∑ –Ω–æ–º–µ—Ä–æ–≤: {page_num + 1 - found_count}"
                )
            
            doc.close()
            results['processing_time'] = time.time() - start_time
            
            return results
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'processor' not in st.session_state:
    st.session_state.processor = PDFProcessor()

if 'executor' not in st.session_state:
    st.session_state.executor = AutoExecutor()

if 'processed_results' not in st.session_state:
    st.session_state.processed_results = None

if 'recorded_positions' not in st.session_state:
    st.session_state.recorded_positions = {}

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .guide-box {
        background-color: #f0f8ff;
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #4ECDC4;
        margin: 10px 0;
    }
    .step-box {
        background-color: #fff;
        padding: 15px;
        margin: 10px 0;
        border-radius: 8px;
        border-left: 4px solid #667eea;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .record-box {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        padding: 15px;
        margin: 10px 0;
        border-radius: 8px;
    }
    .auto-box {
        background-color: #d4edda;
        border-left: 4px solid #28a745;
        padding: 15px;
        margin: 10px 0;
        border-radius: 8px;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if 'confirmed_files' not in st.session_state:
        st.session_state.confirmed_files = []
    if 'edited_files' not in st.session_state:
        st.session_state.edited_files = []
    if 'current_recording' not in st.session_state:
        st.session_state.current_recording = None
        
    st.markdown('<div class="main-header">ü§ñ PDF Auto Assistant - Full Automation</div>', unsafe_allow_html=True)
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF", "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ", "üöÄ –ê–≤—Ç–æ-–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"])
    
    with tab1:
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤")
        
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf")
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            if st.button("üîÑ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É PDF", type="primary", use_container_width=True):
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
                    results = st.session_state.processor.process_pdf(
                        uploaded_file, progress_bar, status_text
                    )
                
                if results:
                    st.session_state.processed_results = results
                    st.session_state.confirmed_files = []
                    st.session_state.edited_files = results['files'].copy()
                    st.rerun()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if st.session_state.processed_results:
            results = st.session_state.processed_results
            
            with st.container():
                st.markdown("---")
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                files_with_numbers = [f for f in results['files'] if f['order_number']]
                files_without_numbers = [f for f in results['files'] if not f['order_number']]
                
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", results['total_pages'])
                col2.metric("–° –Ω–æ–º–µ—Ä–∞–º–∏", len(files_with_numbers))
                col3.metric("–ë–µ–∑ –Ω–æ–º–µ—Ä–æ–≤", len(files_without_numbers))
                col4.metric("–í—Ä–µ–º—è", f"{results['processing_time']:.1f}—Å")
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
                st.markdown("---")
                st.subheader("‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤")
                
                confirmed_files = st.session_state.get('confirmed_files', [])
                
                for i, file_info in enumerate(st.session_state.edited_files):
                    if file_info['order_number']:
                        col_a, col_b, col_c = st.columns([2, 2, 1])
                        with col_a:
                            st.write(f"**{file_info['filename']}**")
                            st.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {file_info['page_number']}")
                        with col_b:
                            new_number = st.text_input(
                                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", 
                                value=file_info['order_number'], 
                                key=f"num_{file_info['filename']}",
                                label_visibility="visible"
                            )
                            st.session_state.edited_files[i]['order_number'] = new_number
                        with col_c:
                            is_confirmed = any(f['filename'] == file_info['filename'] for f in confirmed_files)
                            
                            if is_confirmed:
                                st.success("‚úì")
                            else:
                                if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", key=f"ok_{file_info['filename']}"):
                                    confirmed_files.append(st.session_state.edited_files[i])
                                    st.session_state.confirmed_files = confirmed_files
                                    st.rerun()
                
                if confirmed_files:
                    st.success(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(confirmed_files)}")
                    
                    with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
                        for cf in confirmed_files:
                            st.write(f"- {cf['filename']}: {cf['order_number']}")
    
    with tab2:
        st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        st.info("""
        **–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏ –∑–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.**
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø–æ–º–Ω–∏—Ç –∫—É–¥–∞ –∫–ª–∏–∫–∞—Ç—å –∏ —á—Ç–æ –≤–≤–æ–¥–∏—Ç—å, –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """)
        
        workflow_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞", value="–ê–≤—Ç–æ_–æ–±—Ä–∞–±–æ—Ç–∫–∞_RDS")
        
        st.markdown("### –®–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
        
        step_type = st.selectbox("–¢–∏–ø —à–∞–≥–∞", 
                               ["click", "type", "wait", "hotkey", "focus", "button"])
        
        step_description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞", placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ?")
        
        step_params = {}
        if step_type == "click":
            step_params['action'] = "–ö–ª–∏–∫–Ω—É—Ç—å"
            step_params['location'] = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞", placeholder="–ø–æ–ª–µ_–≤–≤–æ–¥–∞_–Ω–æ–º–µ—Ä–∞")
            
        elif step_type == "type":
            step_params['action'] = "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç"
            text_to_type = st.text_input("–¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞", value="{ORDER_NUMBER}")
            step_params['text_to_type'] = text_to_type
            step_params['location'] = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è", placeholder="–ø–æ–ª–µ_–ø–æ–∏—Å–∫–∞")
            
        elif step_type == "wait":
            step_params['action'] = "–ü–æ–¥–æ–∂–¥–∞—Ç—å"
            seconds = st.number_input("–°–µ–∫—É–Ω–¥—ã", min_value=1, value=2)
            step_params['duration'] = f"{seconds} —Å–µ–∫—É–Ω–¥"
            
        elif step_type == "hotkey":
            step_params['action'] = "–ù–∞–∂–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à"
            step_params['keys'] = st.text_input("–ö–ª–∞–≤–∏—à–∏", value="ctrl+v", placeholder="ctrl+v, enter, tab")
            
        elif step_type == "focus":
            step_params['action'] = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–ª–µ"
            step_params['location'] = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è", placeholder="–ø–æ–ª–µ_–Ω–æ–º–µ—Ä–∞")
            
        elif step_type == "button":
            step_params['action'] = "–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É"
            step_params['location'] = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏", placeholder="–∫–Ω–æ–ø–∫–∞_–ø–æ–∏—Å–∫–∞")

        # –ü—Ä–µ–≤—å—é —à–∞–≥–æ–≤
        if 'workflow_steps' not in st.session_state:
            st.session_state.workflow_steps = []
        
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥", type="primary") and step_description:
            step = {
                'type': step_type,
                'description': step_description,
                **step_params
            }
            st.session_state.workflow_steps.append(step)
            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —à–∞–≥: {step_description}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —à–∞–≥–∏
        if st.session_state.workflow_steps:
            st.markdown("### –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å:")
            for i, step in enumerate(st.session_state.workflow_steps, 1):
                st.markdown(f'<div class="step-box">', unsafe_allow_html=True)
                st.write(f"**–®–∞–≥ {i}: {step['description']}**")
                st.write(f"**–î–µ–π—Å—Ç–≤–∏–µ:** {step['action']}")
                if 'location' in step:
                    st.write(f"**–≠–ª–µ–º–µ–Ω—Ç:** {step['location']}")
                    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–∏
                    if st.button(f"üéØ –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é", key=f"record_{i}"):
                        st.session_state.current_recording = step['location']
                        st.info(f"üîπ –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ '{step['location']}' –∏ –Ω–∞–∂–º–∏—Ç–µ F2")
                if 'text_to_type' in step:
                    st.write(f"**–¢–µ–∫—Å—Ç:** `{step['text_to_type']}`")
                if 'duration' in step:
                    st.write(f"**–í—Ä–µ–º—è:** {step['duration']}")
                if 'keys' in step:
                    st.write(f"**–ö–ª–∞–≤–∏—à–∏:** {step['keys']}")
                st.markdown('</div>', unsafe_allow_html=True)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if st.session_state.recorded_positions:
                st.markdown("### üìç –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
                for element, pos in st.session_state.recorded_positions.items():
                    st.write(f"**{element}:** {pos}")
            
            col_save, col_clear = st.columns(2)
            with col_save:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", type="secondary", use_container_width=True):
                    if st.session_state.executor.create_workflow(workflow_name, st.session_state.workflow_steps):
                        st.success(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å '{workflow_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            with col_clear:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —à–∞–≥–∏", type="secondary", use_container_width=True):
                    st.session_state.workflow_steps = []
                    st.session_state.recorded_positions = {}
                    st.rerun()
    
    with tab3:
        st.subheader("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        
        if not st.session_state.processed_results:
            st.info("üìù –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ PDF —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF'")
        elif not st.session_state.executor.workflows:
            st.info("üéØ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ'")
        else:
            confirmed_files = st.session_state.get('confirmed_files', [])
            if not confirmed_files:
                st.warning("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF'")
            else:
                workflow_names = list(st.session_state.executor.workflows.keys())
                selected_workflow = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å", workflow_names)
                
                if selected_workflow:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    workflow = st.session_state.executor.workflows[selected_workflow]
                    missing_positions = []
                    
                    for step in workflow['steps']:
                        if 'location' in step and step['location'] not in st.session_state.recorded_positions:
                            missing_positions.append(step['location'])
                    
                    if missing_positions:
                        st.error(f"‚ùå –ù–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–∑–∏—Ü–∏–∏: {', '.join(missing_positions)}")
                        st.info("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤–æ –≤–∫–ª–∞–¥–∫—É '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ' –∏ –∑–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    else:
                        st.markdown(f'<div class="auto-box">', unsafe_allow_html=True)
                        st.success("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω—ã! –ì–æ—Ç–æ–≤–æ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.")
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        order_numbers = [f['order_number'] for f in confirmed_files]
                        
                        st.write(f"**–§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {len(order_numbers)}")
                        st.write(f"**–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** {len(order_numbers) * 10} —Å–µ–∫—É–Ω–¥")
                        
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        log_container = st.container()
                        
                        col_start, col_stop = st.columns(2)
                        with col_start:
                            if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", type="primary", use_container_width=True):
                                def run_automation():
                                    def progress_callback(current, total, task):
                                        progress_bar.progress((current + 1) / total)
                                        status_text.text(f"üîÑ {task}")
                                    
                                    success = st.session_state.executor.execute_workflow(
                                        selected_workflow, order_numbers, progress_callback
                                    )
                                    
                                    if success:
                                        status_text.text("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                                        st.balloons()
                                    else:
                                        status_text.text("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                                
                                # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                thread = threading.Thread(target=run_automation)
                                thread.daemon = True
                                thread.start()
                        
                        with col_stop:
                            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", type="secondary", use_container_width=True):
                                st.session_state.executor.stop_execution()
                                status_text.text("‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    main()
