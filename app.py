import streamlit as st
import fitz
import pytesseract
from PIL import Image
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import subprocess
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Splitter - Ultra Rapid",
    page_icon="üìÑ",
    layout="wide"
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Tesseract
def setup_tesseract():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract –¥–ª—è Streamlit Cloud"""
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ tesseract –≤ —Å–∏—Å—Ç–µ–º–µ
        result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)
        if result.returncode == 0:
            tesseract_path = result.stdout.strip()
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            st.success(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: {tesseract_path}")
            return True
        else:
            # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            st.warning("üîÑ Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
            install_result = subprocess.run([
                'apt-get', 'update', '&&', 
                'apt-get', 'install', '-y', 'tesseract-ocr', 'tesseract-ocr-eng'
            ], shell=True, capture_output=True, text=True)
            
            if install_result.returncode == 0:
                st.success("‚úÖ Tesseract —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return True
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tesseract: {install_result.stderr}")
                return False
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tesseract: {e}")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
class StopProcessing:
    def __init__(self):
        self._stop = False
    
    def set(self):
        self._stop = True
    
    def is_set(self):
        return self._stop

stop_processing = StopProcessing()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Tesseract –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
tesseract_available = setup_tesseract()

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stop-button {
        background-color: #ff4444 !important;
        color: white !important;
        border: none !important;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 0.5rem 0;
    }
    .success-rate {
        font-size: 1.5rem;
        font-weight: bold;
        color: #28a745;
    }
</style>
""", unsafe_allow_html=True)

class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        
    def find_order_number_ultra_fast(self, text):
        """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–∫—Å—Ç–µ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô"""
        patterns = [
            r'\b(202[4-9]\d{6})\b',  # 2024XXXXXX
            r'\b(20\d{8})\b',        # 20XXXXXXXX  
            r'\b(\d{10})\b',         # –õ—é–±—ã–µ 10 —Ü–∏—Ñ—Ä
            r'\b(\d{8,12})\b',       # 8-12 —Ü–∏—Ñ—Ä
            r'\b(ORDER[:\\s]*)(\d{8,12})\b',  # ORDER: 12345678
            r'\b(‚Ññ[:\\s]*)(\d{8,12})\b',      # ‚Ññ 12345678
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É (–Ω–æ–º–µ—Ä)
                if isinstance(matches[0], tuple):
                    for match in matches[0]:
                        if match and match.isdigit():
                            return match
                else:
                    return matches[0]
        return None

    def extract_text_optimized(self, page):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            text_methods = []
            
            # 1. –ë—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
            text_raw = page.get_text("text")
            if text_raw and len(text_raw) > 10:
                text_methods.append(text_raw)
            
            # 2. –ú–µ—Ç–æ–¥ —Å–ª–æ–≤ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
            words = page.get_text("words")
            if words:
                text_words = " ".join([word[4] for word in words if len(word) > 4])
                text_methods.append(text_words)
            
            # 3. –ú–µ—Ç–æ–¥ –±–ª–æ–∫–æ–≤
            blocks = page.get_text("blocks")  
            if blocks:
                text_blocks = " ".join([block[4] for block in blocks if len(block) > 4])
                text_methods.append(text_blocks)
            
            combined_text = " ".join(text_methods)
            return combined_text
            
        except Exception as e:
            return ""

    def process_page_fast(self, page_num, page):
        """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if stop_processing.is_set():
            return None, "stopped", page_num
        
        try:
            # –®–∞–≥ 1: –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–û–ß–ï–ù–¨ –ë–´–°–¢–†–û)
            text_direct = self.extract_text_optimized(page)
            order_no = self.find_order_number_ultra_fast(text_direct)
            
            if order_no:
                return order_no, "direct", page_num
            
            # –®–∞–≥ 2: OCR –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ —Ç–æ—á–Ω–µ–µ)
            if tesseract_available and not order_no:
                try:
                    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    pix = page.get_pixmap(matrix=fitz.Matrix(1.2, 1.2))  # –ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    img_data = pix.tobytes("png")  # PNG –±—ã—Å—Ç—Ä–µ–µ
                    img = Image.open(io.BytesIO(img_data))
                    
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    img = img.convert('L')  # Grayscale
                    
                    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô OCR —Å –±—ã—Å—Ç—Ä—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    ocr_text = pytesseract.image_to_string(
                        img, 
                        lang='eng',
                        config='--oem 1 --psm 6 -c preserve_interword_spaces=0'
                    )
                    
                    order_no = self.find_order_number_ultra_fast(ocr_text)
                    if order_no:
                        return order_no, "ocr", page_num
                        
                except Exception as e:
                    return None, "ocr_error", page_num
            
            return None, "not_found", page_num
            
        except Exception as e:
            return None, "error", page_num

    def process_pdf_optimized(self, pdf_file, progress_bar, status_text):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF"""
        global stop_processing
        stop_processing = StopProcessing()
        
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, "wb") as f:
            f.write(pdf_file.getvalue())
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_dir = os.path.join(self.temp_dir, "output")
            os.makedirs(output_dir, exist_ok=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'total': total_pages,
                'direct': 0,
                'ocr': 0,
                'failed': 0,
                'stopped': 0,
                'files': [],
                'success_rate': 0,
                'total_time': 0
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            for page_num in range(total_pages):
                if stop_processing.is_set():
                    stats['stopped'] = total_pages - page_num
                    break
                
                page_start_time = time.time()
                
                page = doc[page_num]
                order_no, method, _ = self.process_page_fast(page_num, page)
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF
                new_doc = fitz.open()
                new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                if order_no:
                    filename = f"{order_no}.pdf"
                else:
                    filename = f"page_{page_num + 1}.pdf"
                
                output_path = os.path.join(output_dir, filename)
                
                # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
                counter = 1
                base_name = os.path.splitext(filename)[0]
                while os.path.exists(output_path):
                    output_path = os.path.join(output_dir, f"{base_name}_{counter}.pdf")
                    counter += 1
                
                new_doc.save(output_path)
                new_doc.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if order_no:
                    if method == "direct":
                        stats['direct'] += 1
                    else:
                        stats['ocr'] += 1
                else:
                    stats['failed'] += 1
                
                stats['files'].append({
                    'filename': os.path.basename(output_path),
                    'page': page_num + 1,
                    'method': method,
                    'order_no': order_no
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                
                elapsed = time.time() - start_time
                speed = (page_num + 1) / elapsed if elapsed > 0 else 0
                processed = page_num + 1
                
                status_text.text(
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_pages} | "
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                    f"‚úÖ –¢–µ–∫—Å—Ç: {stats['direct']} | "
                    f"üîç OCR: {stats['ocr']} | "
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {stats['failed']}"
                )
            
            doc.close()
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            if stats['files']:
                zip_path = os.path.join(self.temp_dir, "results.zip")
                with zipfile.ZipFile(zip_path, 'w') as zipf:
                    for file_info in stats['files']:
                        file_path = os.path.join(output_dir, file_info['filename'])
                        if os.path.exists(file_path):
                            zipf.write(file_path, file_info['filename'])
                
                stats['zip_path'] = zip_path
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_time = time.time() - start_time
            stats['total_time'] = total_time
            
            success_count = stats['direct'] + stats['ocr']
            stats['success_rate'] = (success_count / stats['total']) * 100 if stats['total'] > 0 else 0
            
            return stats
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}")
            import traceback
            st.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            return None

    def get_download_link(self, file_path, link_text):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if not file_path or not os.path.exists(file_path):
            return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        with open(file_path, "rb") as f:
            data = f.read()
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="pdf_results.zip" style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;">{link_text}</a>'
        return href

def main():
    global stop_processing
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<div class="main-header">üìÑ PDF Splitter - Ultra Rapid</div>', unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if 'processor' not in st.session_state:
        st.session_state.processor = PDFProcessor()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        st.markdown("---")
        st.markdown("**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**")
        if tesseract_available:
            st.success("‚úÖ Tesseract OCR –¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("–†–µ–∂–∏–º: –¢–µ–∫—Å—Ç + OCR")
        else:
            st.warning("‚ö†Ô∏è Tesseract –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            
        st.markdown("---")
        if st.button("üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", use_container_width=True):
            stop_processing.set()
            st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            type="pdf",
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
        )
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {uploaded_file.size / 1024 / 1024:.2f} MB")
            
            col_btn1, col_btn2 = st.columns([2, 1])
            
            with col_btn1:
                process_clicked = st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", use_container_width=True)
            
            with col_btn2:
                stop_clicked = st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", use_container_width=True)
            
            if stop_clicked:
                stop_processing.set()
                st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            
            if process_clicked:
                # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                progress_bar = st.progress(0)
                status_text = st.empty()
                results_placeholder = st.empty()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
                with st.spinner("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
                    stats = st.session_state.processor.process_pdf_optimized(
                        uploaded_file, 
                        progress_bar, 
                        status_text
                    )
                
                if stats:
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                    with results_placeholder.container():
                        st.markdown("---")
                        st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", stats['total'])
                        with col2:
                            st.metric("–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–º", stats['direct'])
                        with col3:
                            st.metric("–ù–∞–π–¥–µ–Ω–æ OCR", stats['ocr'])
                        with col4:
                            st.metric("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", stats['failed'])
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        col_time, col_rate, col_stopped = st.columns(3)
                        with col_time:
                            st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{stats['total_time']:.1f}—Å")
                        with col_rate:
                            st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{stats['success_rate']:.1f}%")
                        with col_stopped:
                            if stats['stopped'] > 0:
                                st.metric("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", stats['stopped'])
                        
                        if stats['stopped'] > 0:
                            st.warning(f"‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! {stats['stopped']} —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if stats.get('zip_path'):
                            st.markdown("---")
                            st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                            download_link = st.session_state.processor.get_download_link(
                                stats['zip_path'], 
                                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ —Å PDF —Ñ–∞–π–ª–∞–º–∏"
                            )
                            st.markdown(download_link, unsafe_allow_html=True)
                        
                        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                        with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"):
                            for file_info in stats['files']:
                                method_icon = "‚úÖ" if file_info['method'] == 'direct' else "üîç" if file_info['method'] == 'ocr' else "‚ùå"
                                st.write(f"{method_icon} –°—Ç—Ä–∞–Ω–∏—Ü–∞ {file_info['page']}: `{file_info['filename']}`")
    
    with col2:
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        st.markdown("""
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ** PDF —Ñ–∞–π–ª
        2. **–ù–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        3. **–î–æ–∂–¥–∏—Ç–µ—Å—å** –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        4. **–°–∫–∞—á–∞–π—Ç–µ** —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        **–§—É–Ω–∫—Ü–∏–∏:**
        - ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
        - üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        - ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
        - üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        - ‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        """)

if __name__ == "__main__":
    main()
