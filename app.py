import streamlit as st
import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import io
import re
import tempfile
import os
import zipfile
import base64
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Splitter - Ultra Rapid",
    page_icon="üìÑ",
    layout="wide"
)

# CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .info-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
    }
    .progress-bar {
        width: 100%;
        background-color: #f0f0f0;
        border-radius: 10px;
        margin: 10px 0;
    }
    .progress-fill {
        height: 20px;
        background-color: #4CAF50;
        border-radius: 10px;
        text-align: center;
        color: white;
        line-height: 20px;
    }
</style>
""", unsafe_allow_html=True)

class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        
    def find_order_number_ultra_fast(self, text):
        """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–∫—Å—Ç–µ"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è 10 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 20
        matches = re.findall(r'\b(202[4-9]\d{6})\b', text)
        if matches:
            return matches[0]
        
        matches_backup = re.findall(r'\b(20\d{8})\b', text)
        if matches_backup:
            return matches_backup[0]
        
        return None

    def extract_order_number_hybrid(self, page):
        """–ì–∏–±—Ä–∏–¥–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞"""
        # –®–∞–≥ 1: –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
        text_direct = page.get_text()
        order_no = self.find_order_number_ultra_fast(text_direct)
        if order_no:
            return order_no, "direct"
        
        # –®–∞–≥ 2: OCR –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            pix = page.get_pixmap(matrix=fitz.Matrix(1.2, 1.2))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            img_data = pix.tobytes("ppm")
            img = Image.open(io.BytesIO(img_data))
            
            # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            img = img.convert('L')  # Grayscale
            
            # –ë—ã—Å—Ç—Ä—ã–π OCR
            ocr_text = pytesseract.image_to_string(
                img, 
                lang='eng',
                config='--oem 1 --psm 6 -c tessedit_do_invert=0'
            )
            
            order_no = self.find_order_number_ultra_fast(ocr_text)
            if order_no:
                return order_no, "ocr"
                
        except Exception as e:
            st.warning(f"OCR error on page: {e}")
        
        return None, "none"

    def process_pdf(self, pdf_file, progress_bar, status_text):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF"""
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, "wb") as f:
            f.write(pdf_file.getvalue())
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_dir = os.path.join(self.temp_dir, "output")
            os.makedirs(output_dir, exist_ok=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'total': total_pages,
                'direct': 0,
                'ocr': 0,
                'failed': 0,
                'files': []
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for page_num in range(total_pages):
                page = doc[page_num]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
                order_no, method = self.extract_order_number_hybrid(page)
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF
                new_doc = fitz.open()
                new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                if order_no:
                    filename = f"{order_no}.pdf"
                else:
                    filename = f"page_{page_num + 1}.pdf"
                
                output_path = os.path.join(output_dir, filename)
                
                # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
                counter = 1
                while os.path.exists(output_path):
                    name, ext = os.path.splitext(filename)
                    output_path = os.path.join(output_dir, f"{name}_{counter}{ext}")
                    counter += 1
                
                new_doc.save(output_path)
                new_doc.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if order_no:
                    if method == "direct":
                        stats['direct'] += 1
                    else:
                        stats['ocr'] += 1
                else:
                    stats['failed'] += 1
                
                stats['files'].append(os.path.basename(output_path))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                
                elapsed = time.time() - start_time
                speed = (page_num + 1) / elapsed if elapsed > 0 else 0
                status_text.text(
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {page_num + 1}/{total_pages} | "
                    f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                    f"–ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç: {stats['direct']} | OCR: {stats['ocr']}"
                )
            
            doc.close()
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            zip_path = os.path.join(self.temp_dir, "results.zip")
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for file in os.listdir(output_dir):
                    file_path = os.path.join(output_dir, file)
                    zipf.write(file_path, file)
            
            total_time = time.time() - start_time
            stats['total_time'] = total_time
            stats['zip_path'] = zip_path
            
            return stats
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
            return None

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            if os.path.exists(self.temp_dir):
                import shutil
                shutil.rmtree(self.temp_dir)
        except:
            pass

    def get_download_link(self, file_path, link_text):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        with open(file_path, "rb") as f:
            data = f.read()
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="pdf_results.zip">{link_text}</a>'
        return href

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<div class="main-header">üìÑ PDF Splitter - Ultra Rapid</div>', unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if 'processor' not in st.session_state:
        st.session_state.processor = PDFProcessor()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown("""
        **–§—É–Ω–∫—Ü–∏–∏:**
        - üìñ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ PDF –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        - üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        - ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ç–µ–∫—Å—Ç + OCR)
        - üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ ZIP
        
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤:**
        - 2024XXXXXX (10 —Ü–∏—Ñ—Ä)
        - 20XXXXXXXX (10 —Ü–∏—Ñ—Ä)
        """)
        
        st.markdown("---")
        st.markdown("**–°—Ç–∞—Ç—É—Å Tesseract OCR:**")
        try:
            pytesseract.get_tesseract_version()
            st.success("‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            st.warning("‚ö†Ô∏è Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω - OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            type="pdf",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        )
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {uploaded_file.size / 1024 / 1024:.2f} MB")
            
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary"):
                # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_bar = st.progress(0)
                status_text = st.empty()
                results_placeholder = st.empty()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
                    stats = st.session_state.processor.process_pdf(
                        uploaded_file, 
                        progress_bar, 
                        status_text
                    )
                
                if stats:
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    with results_placeholder.container():
                        st.markdown("---")
                        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", stats['total'])
                        with col2:
                            st.metric("–ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç", stats['direct'])
                        with col3:
                            st.metric("OCR", stats['ocr'])
                        with col4:
                            st.metric("–ë–µ–∑ –Ω–æ–º–µ—Ä–∞", stats['failed'])
                        
                        st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{stats['total_time']:.1f} —Å–µ–∫")
                        
                        # –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        st.markdown("---")
                        st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                        
                        download_link = st.session_state.processor.get_download_link(
                            stats['zip_path'], 
                            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ —Å PDF —Ñ–∞–π–ª–∞–º–∏"
                        )
                        st.markdown(download_link, unsafe_allow_html=True)
                        
                        # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                        with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"):
                            for i, filename in enumerate(stats['files'], 1):
                                st.write(f"{i}. {filename}")
    
    with col2:
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        st.markdown("""
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ** PDF —Ñ–∞–π–ª
        2. **–ù–∞–∂–º–∏—Ç–µ** "–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
        3. **–°–∫–∞—á–∞–π—Ç–µ** —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        **–ú–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:**
        - ‚úÖ **–ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç**: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
        - üîç **OCR**: –î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        - ‚ö° **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏**: –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –ª—É—á—à–∏–π –º–µ—Ç–æ–¥
        """)
        
        st.markdown("---")
        st.subheader("üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        st.markdown("""
        - **PyMuPDF**: –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
        - **Tesseract**: OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        - **Streamlit**: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        - **Pillow**: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """)

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
import atexit
atexit.register(lambda: st.session_state.get('processor', PDFProcessor()).cleanup())

if __name__ == "__main__":
    main()