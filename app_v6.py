import streamlit as st
import fitz
import pytesseract
from PIL import Image, ImageEnhance
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import subprocess
import concurrent.futures
from threading import Lock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Splitter - OPTIMAL",
    page_icon="üìÑ",
    layout="wide"
)

# –ö—ç—à–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Tesseract
@st.cache_resource
def setup_tesseract():
    try:
        result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)
        if result.returncode == 0:
            tesseract_path = result.stdout.strip()
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            return True
        else:
            install_cmd = "apt-get update && apt-get install -y tesseract-ocr tesseract-ocr-eng"
            subprocess.run(install_cmd, shell=True, capture_output=True)
            return True
    except:
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
tesseract_available = setup_tesseract()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
class ProcessingState:
    def __init__(self):
        self._stop = False
        self._lock = Lock()
    
    def stop(self):
        with self._lock:
            self._stop = True
    
    def should_stop(self):
        with self._lock:
            return self._stop
    
    def reset(self):
        with self._lock:
            self._stop = False

processing_state = ProcessingState()

# CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .optimal-balance {
        background: linear-gradient(45deg, #00b09b, #96c93d);
        color: white;
        padding: 12px;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
        font-size: 1.2rem;
    }
    .balance-card {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        border-left: 5px solid #ffa726;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        self._pattern_cache = {}
        
    def _compile_patterns(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        if not self._pattern_cache:
            self._pattern_cache = {
                'ten_digits_202x': re.compile(r'\b(202[4-9]\d{6})\b'),
                'twenty_digits': re.compile(r'\b(20\d{8})\b'),
                'any_ten_digits': re.compile(r'\b(\d{10})\b'),
                'eight_to_twelve': re.compile(r'\b(\d{8,12})\b'),
                'order_prefix': re.compile(r'\b(ORDER\s*[:#]?\s*)(\d{8,12})\b', re.IGNORECASE),
                'number_prefix': re.compile(r'\b(‚Ññ\s*[:#]?\s*)(\d{8,12})\b', re.IGNORECASE),
            }
        return self._pattern_cache

    def find_order_number_optimized(self, text):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ - –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        if not text or len(text) < 3:
            return None
            
        patterns = self._pattern_cache
        
        # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        quick_checks = ['ten_digits_202x', 'twenty_digits', 'any_ten_digits']
        for pattern_name in quick_checks:
            matches = patterns[pattern_name].findall(text)
            if matches:
                return matches[0] if isinstance(matches[0], str) else matches[0][0]
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        prefix_checks = ['order_prefix', 'number_prefix']
        for pattern_name in prefix_checks:
            matches = patterns[pattern_name].findall(text)
            if matches:
                for match in matches:
                    if isinstance(match, tuple):
                        for item in match:
                            if item and item.isdigit() and 8 <= len(item) <= 12:
                                return item
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
        wide_matches = patterns['eight_to_twelve'].findall(text)
        if wide_matches:
            numbers = [m for m in wide_matches if isinstance(m, str)]
            if numbers:
                return max(numbers, key=len)
        
        return None

    def enhance_image_fast(self, img):
        """–ë—ã—Å—Ç—Ä–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å –∫–∞—á–µ—Å—Ç–≤–æ/—Å–∫–æ—Ä–æ—Å—Ç—å)"""
        try:
            # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
            enhancer = ImageEnhance.Contrast(img)
            img = enhancer.enhance(1.5)  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            
            enhancer = ImageEnhance.Sharpness(img)
            img = enhancer.enhance(1.3)  # –õ–µ–≥–∫–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å
            
            return img
        except:
            return img

    def extract_text_fast(self, page):
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –±—ã—Å—Ç—Ä—ã—Ö –º–µ—Ç–æ–¥–∞
            text_methods = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            text_raw = page.get_text("text")
            if text_raw and len(text_raw.strip()) > 5:
                text_methods.append(text_raw)
            
            # –°–ª–æ–≤–∞ (–¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
            words = page.get_text("words")
            if words:
                text_words = " ".join([word[4] for word in words if len(word) > 4 and word[4].strip()])
                if len(text_words) > len(text_raw or ""):
                    text_methods.append(text_words)
            
            return " ".join(text_methods)
        except:
            return ""

    def ocr_optimized(self, page):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCR - –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        try:
            # –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
            pix = page.get_pixmap(matrix=fitz.Matrix(1.5, 1.5))
            img_data = pix.tobytes("png")
            
            img = Image.open(io.BytesIO(img_data))
            img = img.convert('L')
            
            # –ë—ã—Å—Ç—Ä–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            img_enhanced = self.enhance_image_fast(img)
            
            # 2 –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–∞ OCR –≤–º–µ—Å—Ç–æ 5
            ocr_configs = [
                '--oem 3 --psm 6',  # –û—Å–Ω–æ–≤–Ω–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
                '--oem 3 --psm 4',  # –î–ª—è –∫–æ–ª–æ–Ω–æ–∫
            ]
            
            best_ocr_text = ""
            
            for config in ocr_configs:
                try:
                    ocr_text = pytesseract.image_to_string(img_enhanced, lang='eng', config=config)
                    if ocr_text and len(ocr_text.strip()) > len(best_ocr_text.strip()):
                        best_ocr_text = ocr_text
                except:
                    continue
            
            return best_ocr_text.strip()
            
        except Exception as e:
            return ""

    def process_single_page_optimized(self, args):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        page_num, page = args
        
        if processing_state.should_stop():
            return None, "stopped", page_num
        
        try:
            # –®–∞–≥ 1: –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text_direct = self.extract_text_fast(page)
            order_no = self.find_order_number_optimized(text_direct)
            
            if order_no:
                return order_no, "direct", page_num
            
            # –®–∞–≥ 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCR
            if tesseract_available:
                ocr_text = self.ocr_optimized(page)
                order_no = self.find_order_number_optimized(ocr_text)
                
                if order_no:
                    return order_no, "ocr", page_num
            
            return None, "not_found", page_num
            
        except Exception as e:
            return None, "error", page_num

    def process_pdf_optimized(self, pdf_file, progress_bar, status_text):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF - –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        processing_state.reset()
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, "wb") as f:
            f.write(pdf_file.getvalue())
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            output_dir = os.path.join(self.temp_dir, "output")
            os.makedirs(output_dir, exist_ok=True)
            
            stats = {
                'total': total_pages,
                'direct': 0,
                'ocr': 0,
                'failed': 0,
                'stopped': 0,
                'files': [],
                'total_time': 0,
                'accuracy_rate': 0,
                'speed': 0
            }
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
            completed_pages = 0
            batch_size = min(3, total_pages)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            
            for batch_start in range(0, total_pages, batch_size):
                if processing_state.should_stop():
                    stats['stopped'] = total_pages - completed_pages
                    break
                
                batch_end = min(batch_start + batch_size, total_pages)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                with concurrent.futures.ThreadPoolExecutor(max_workers=batch_size) as executor:
                    futures = []
                    for page_num in range(batch_start, batch_end):
                        page = doc[page_num]
                        future = executor.submit(self.process_single_page_optimized, (page_num, page))
                        futures.append((future, page_num))
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for future, page_num in futures:
                        if processing_state.should_stop():
                            break
                            
                        try:
                            order_no, method, _ = future.result(timeout=30)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                            
                            # –°–æ–∑–¥–∞–µ–º PDF
                            new_doc = fitz.open()
                            new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                            
                            filename = f"{order_no}.pdf" if order_no else f"page_{page_num + 1}.pdf"
                            output_path = os.path.join(output_dir, filename)
                            
                            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                            counter = 1
                            base_name = os.path.splitext(filename)[0]
                            while os.path.exists(output_path):
                                output_path = os.path.join(output_dir, f"{base_name}_{counter}.pdf")
                                counter += 1
                            
                            new_doc.save(output_path)
                            new_doc.close()
                            
                            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            if order_no:
                                if method == "direct":
                                    stats['direct'] += 1
                                else:
                                    stats['ocr'] += 1
                            else:
                                stats['failed'] += 1
                            
                            stats['files'].append({
                                'filename': os.path.basename(output_path),
                                'page': page_num + 1,
                                'method': method,
                                'order_no': order_no,
                                'success': order_no is not None
                            })
                            
                            completed_pages += 1
                            
                            # –ü—Ä–æ–≥—Ä–µ—Å—Å
                            progress = completed_pages / total_pages
                            progress_bar.progress(progress)
                            
                            elapsed = time.time() - start_time
                            speed = completed_pages / elapsed if elapsed > 0 else 0
                            success_count = stats['direct'] + stats['ocr']
                            accuracy = (success_count / completed_pages) * 100 if completed_pages > 0 else 0
                            
                            status_text.text(
                                f"‚öñÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed_pages}/{total_pages} | "
                                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}% | "
                                f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                                f"‚úÖ –¢–µ–∫—Å—Ç: {stats['direct']} | "
                                f"üîç OCR: {stats['ocr']} | "
                                f"‚ùå –û—à–∏–±–∫–∏: {stats['failed']}"
                            )
                            
                        except concurrent.futures.TimeoutError:
                            stats['failed'] += 1
                            continue
                        except Exception as e:
                            stats['failed'] += 1
                            continue
            
            doc.close()
            
            # ZIP –∞—Ä—Ö–∏–≤
            if stats['files']:
                zip_path = os.path.join(self.temp_dir, "results.zip")
                with zipfile.ZipFile(zip_path, 'w') as zipf:
                    for file_info in stats['files']:
                        file_path = os.path.join(output_dir, file_info['filename'])
                        if os.path.exists(file_path):
                            zipf.write(file_path, file_info['filename'])
                stats['zip_path'] = zip_path
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_time = time.time() - start_time
            stats['total_time'] = total_time
            
            success_count = stats['direct'] + stats['ocr']
            stats['accuracy_rate'] = (success_count / stats['total']) * 100 if stats['total'] > 0 else 0
            stats['speed'] = stats['total'] / total_time if total_time > 0 else 0
            
            return stats
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            return None

    def get_download_link(self, file_path, link_text):
        if not file_path or not os.path.exists(file_path):
            return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        with open(file_path, "rb") as f:
            data = f.read()
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="pdf_results.zip" style="background: linear-gradient(45deg, #00b09b, #96c93d); color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;">{link_text}</a>'
        return href

def main():
    st.markdown('<div class="main-header">üìÑ PDF Splitter - OPTIMAL BALANCE</div>', unsafe_allow_html=True)
    st.markdown('<div class="optimal-balance">‚öñÔ∏è –ò–î–ï–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–° –°–ö–û–†–û–°–¢–ò –ò –¢–û–ß–ù–û–°–¢–ò</div>', unsafe_allow_html=True)
    
    if 'processor' not in st.session_state:
        st.session_state.processor = PDFProcessor()
    
    # Sidebar
    with st.sidebar:
        st.header("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        st.markdown("""
        **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
        - üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ 1.5x (–≤–º–µ—Å—Ç–æ 2x)
        - üîß 2 —Ä–µ–∂–∏–º–∞ OCR (–≤–º–µ—Å—Ç–æ 5)
        - ‚ö° –ë—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        - üöÄ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        - üíæ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        """)
        
        st.markdown(f"**OCR Engine:** {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if tesseract_available else '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        if st.button("üõë –û–°–¢–ê–ù–û–í–ò–¢–¨", use_container_width=True, type="primary"):
            processing_state.stop()
            st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")

    # Main area
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf")
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            file_size = uploaded_file.size / 1024 / 1024
            
            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            estimated_pages = max(10, int(file_size * 10))  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            estimated_time = estimated_pages / 4  # –û–∂–∏–¥–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 4 —Å—Ç—Ä/—Å–µ–∫
            
            st.info(f"üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} MB | üïê –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.1f} —Å–µ–∫")
            
            if st.button("‚öñÔ∏è –ó–ê–ü–£–°–¢–ò–¢–¨ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£", 
                        type="primary", use_container_width=True):
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                results_placeholder = st.empty()
                
                with st.spinner("‚öñÔ∏è –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê..."):
                    stats = st.session_state.processor.process_pdf_optimized(
                        uploaded_file, progress_bar, status_text
                    )
                
                if stats:
                    with results_placeholder.container():
                        st.markdown("---")
                        st.subheader("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
                        st.markdown(f'<div class="balance-card">'
                                  f'üéØ –¢–û–ß–ù–û–°–¢–¨: {stats["accuracy_rate"]:.1f}% | '
                                  f'‚ö° –°–ö–û–†–û–°–¢–¨: {stats["speed"]:.1f} —Å—Ç—Ä/—Å–µ–∫ | '
                                  f'‚è±Ô∏è –í–†–ï–ú–Ø: {stats["total_time"]:.1f}—Å'
                                  f'</div>', unsafe_allow_html=True)
                        
                        col1, col2, col3, col4 = st.columns(4)
                        col1.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", stats['total'])
                        col2.metric("–£—Å–ø–µ—à–Ω–æ", stats['direct'] + stats['ocr'])
                        col3.metric("–¢–µ–∫—Å—Ç–æ–º", stats['direct'])
                        col4.metric("OCR", stats['ocr'])
                        
                        # –î–µ—Ç–∞–ª–∏
                        st.markdown("#### üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤:")
                        col_e1, col_e2 = st.columns(2)
                        col_e1.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞", 
                                    f"{(stats['direct']/(stats['direct'] + stats['ocr'])*100):.1f}%" 
                                    if (stats['direct'] + stats['ocr']) > 0 else "0%")
                        col_e2.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å OCR", 
                                    f"{(stats['ocr']/(stats['direct'] + stats['ocr'])*100):.1f}%" 
                                    if (stats['direct'] + stats['ocr']) > 0 else "0%")
                        
                        if stats['stopped'] > 0:
                            st.error(f"‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {stats['stopped']} —Å—Ç—Ä–∞–Ω–∏—Ü")
                        
                        if stats['accuracy_rate'] >= 95:
                            st.success("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å")
                        elif stats['accuracy_rate'] >= 85:
                            st.warning("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
                        else:
                            st.error("‚ùí –ù–ò–ó–ö–ê–Ø –¢–û–ß–ù–û–°–¢–¨! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ PDF")
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                        if stats.get('zip_path'):
                            st.markdown("---")
                            st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                            download_link = st.session_state.processor.get_download_link(
                                stats['zip_path'], "‚¨áÔ∏è –°–ö–ê–ß–ê–¢–¨ PDF –§–ê–ô–õ–´"
                            )
                            st.markdown(download_link, unsafe_allow_html=True)
    
    with col2:
        st.subheader("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        st.markdown("""
        **–°–∫–æ—Ä–æ—Å—Ç—å vs –ö–∞—á–µ—Å—Ç–≤–æ:**
        
        üöÄ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏:**
        - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ 1.5x ‚Üí +50% —Å–∫–æ—Ä–æ—Å—Ç–∏
        - 2 OCR —Ä–µ–∂–∏–º–∞ ‚Üí +150% —Å–∫–æ—Ä–æ—Å—Ç–∏  
        - –ü–∞–∫–µ—Ç—ã –ø–æ 3 —Å—Ç—Ä ‚Üí +100% —Å–∫–æ—Ä–æ—Å—Ç–∏
        - –ë—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è ‚Üí +50% —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        üéØ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:**
        - –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç +50%
        - –õ–µ–≥–∫–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å +30%
        - 6 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–∏—Å–∫–∞
        - 2 –º–µ—Ç–æ–¥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
        **–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
        - üìä –¢–æ—á–Ω–æ—Å—Ç—å: 90-95%
        - ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 4-6 —Å—Ç—Ä/—Å–µ–∫
        - üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 3x –±—ã—Å—Ç—Ä–µ–µ –º–∞–∫—Å. —Ç–æ—á–Ω–æ—Å—Ç–∏
        """)
        
        if st.button("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨", use_container_width=True):
            processing_state.stop()
            st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

if __name__ == "__main__":
    main()
