import streamlit as st
import fitz
import pytesseract
from PIL import Image
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Splitter - RELIABLE",
    page_icon="üìÑ",
    layout="wide"
)

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Tesseract
def setup_tesseract():
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ tesseract
        result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)
        if result.returncode == 0:
            tesseract_path = result.stdout.strip()
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            return True
        return False
    except:
        return False

tesseract_available = setup_tesseract()

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
class StopProcessing:
    def __init__(self):
        self.stop = False
    
    def set(self):
        self.stop = True
    
    def is_set(self):
        return self.stop

stop_processing = StopProcessing()

# CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .reliable {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        padding: 10px;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        
    def find_order_number(self, text):
        """–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤"""
        if not text:
            return None
            
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = [
            r'\b(202[4-9]\d{6})\b',  # 2024XXXXXX
            r'\b(20\d{8})\b',        # 20XXXXXXXX
            r'\b(\d{10})\b',         # –õ—é–±—ã–µ 10 —Ü–∏—Ñ—Ä
            r'\b(\d{8,12})\b',       # 8-12 —Ü–∏—Ñ—Ä
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            if matches:
                return matches[0]
        return None

    def extract_text_simple(self, page):
        """–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            return page.get_text()
        except:
            return ""

    def process_page_simple(self, page_num, page):
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if stop_processing.is_set():
            return None, "stopped"
        
        try:
            # –®–∞–≥ 1: –¢–µ–∫—Å—Ç –∏–∑ PDF
            text = self.extract_text_simple(page)
            order_no = self.find_order_number(text)
            
            if order_no:
                return order_no, "direct"
            
            # –®–∞–≥ 2: –ü—Ä–æ—Å—Ç–æ–π OCR
            if tesseract_available:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    pix = page.get_pixmap(matrix=fitz.Matrix(1.5, 1.5))
                    img_data = pix.tobytes("png")
                    img = Image.open(io.BytesIO(img_data))
                    img = img.convert('L')
                    
                    # –ü—Ä–æ—Å—Ç–æ–π OCR
                    ocr_text = pytesseract.image_to_string(img, lang='eng')
                    order_no = self.find_order_number(ocr_text)
                    
                    if order_no:
                        return order_no, "ocr"
                except:
                    pass
            
            return None, "not_found"
            
        except Exception as e:
            return None, "error"

    def process_pdf_simple(self, pdf_file, progress_bar, status_text):
        """–ü–†–û–°–¢–ê–Ø –∏ –ù–ê–î–ï–ñ–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF"""
        stop_processing.stop = False
        start_time = time.time()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
            with open(temp_pdf_path, "wb") as f:
                f.write(pdf_file.getvalue())
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_dir = os.path.join(self.temp_dir, "output")
            os.makedirs(output_dir, exist_ok=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'total': total_pages,
                'direct': 0,
                'ocr': 0,
                'failed': 0,
                'files': []
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for page_num in range(total_pages):
                if stop_processing.is_set():
                    break
                
                page = doc[page_num]
                order_no, method = self.process_page_simple(page_num, page)
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF
                new_doc = fitz.open()
                new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                
                # –ò–º—è —Ñ–∞–π–ª–∞
                if order_no:
                    filename = f"{order_no}.pdf"
                else:
                    filename = f"page_{page_num + 1}.pdf"
                
                output_path = os.path.join(output_dir, filename)
                
                # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                counter = 1
                base_name = os.path.splitext(filename)[0]
                while os.path.exists(output_path):
                    output_path = os.path.join(output_dir, f"{base_name}_{counter}.pdf")
                    counter += 1
                
                new_doc.save(output_path)
                new_doc.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if order_no:
                    if method == "direct":
                        stats['direct'] += 1
                    else:
                        stats['ocr'] += 1
                else:
                    stats['failed'] += 1
                
                stats['files'].append({
                    'filename': os.path.basename(output_path),
                    'page': page_num + 1,
                    'method': method,
                    'order_no': order_no
                })
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                
                # –°—Ç–∞—Ç—É—Å
                elapsed = time.time() - start_time
                speed = (page_num + 1) / elapsed if elapsed > 0 else 0
                
                status_text.text(
                    f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {page_num + 1}/{total_pages} | "
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {stats['direct'] + stats['ocr']} | "
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {stats['failed']}"
                )
            
            doc.close()
            
            # –°–æ–∑–¥–∞–µ–º ZIP
            if stats['files']:
                zip_path = os.path.join(self.temp_dir, "results.zip")
                with zipfile.ZipFile(zip_path, 'w') as zipf:
                    for file_info in stats['files']:
                        file_path = os.path.join(output_dir, file_info['filename'])
                        zipf.write(file_path, file_info['filename'])
                stats['zip_path'] = zip_path
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats['total_time'] = time.time() - start_time
            stats['success_rate'] = ((stats['direct'] + stats['ocr']) / total_pages) * 100
            
            return stats
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            import traceback
            st.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            return None

    def get_download_link(self, file_path, link_text):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        if not file_path or not os.path.exists(file_path):
            return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        with open(file_path, "rb") as f:
            data = f.read()
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="pdf_results.zip" style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;">{link_text}</a>'
        return href

def main():
    st.markdown('<div class="main-header">üìÑ PDF Splitter - RELIABLE</div>', unsafe_allow_html=True)
    st.markdown('<div class="reliable">üîß –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –í–ï–†–°–ò–Ø</div>', unsafe_allow_html=True)
    
    if 'processor' not in st.session_state:
        st.session_state.processor = PDFProcessor()
    
    # Sidebar
    with st.sidebar:
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown("""
        **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
        - ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è
        - üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥
        - üöÄ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        - üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö PDF
        """)
        
        st.markdown(f"**OCR:** {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if tesseract_available else '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            stop_processing.set()
            st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    # Main area
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf")
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.info(f"üìä –†–∞–∑–º–µ—Ä: {uploaded_file.size / 1024 / 1024:.2f} MB")
            
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", use_container_width=True):
                progress_bar = st.progress(0)
                status_text = st.empty()
                results_placeholder = st.empty()
                
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
                    stats = st.session_state.processor.process_pdf_simple(
                        uploaded_file, progress_bar, status_text
                    )
                
                if stats:
                    with results_placeholder.container():
                        st.markdown("---")
                        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        
                        col1, col2, col3, col4 = st.columns(4)
                        col1.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", stats['total'])
                        col2.metric("–¢–µ–∫—Å—Ç–æ–º", stats['direct'])
                        col3.metric("OCR", stats['ocr'])
                        col4.metric("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", stats['failed'])
                        
                        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{stats['success_rate']:.1f}%")
                        st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{stats['total_time']:.1f} —Å–µ–∫")
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                        if stats.get('zip_path'):
                            st.markdown("---")
                            st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                            download_link = st.session_state.processor.get_download_link(
                                stats['zip_path'], "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤"
                            )
                            st.markdown(download_link, unsafe_allow_html=True)
                        
                        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                        with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"):
                            for file_info in stats['files']:
                                method_icon = "‚úÖ" if file_info['method'] == 'direct' else "üîç" if file_info['method'] == 'ocr' else "‚ùå"
                                status = "–£–°–ü–ï–•" if file_info['order_no'] else "–ù–ï –ù–ê–ô–î–ï–ù–û"
                                st.write(f"{method_icon} –°—Ç—Ä–∞–Ω–∏—Ü–∞ {file_info['page']}: {file_info['filename']} ({status})")
    
    with col2:
        st.subheader("‚ö° –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.markdown("""
        **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ** PDF —Ñ–∞–π–ª
        2. **–ù–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        3. **–°–∏—Å—Ç–µ–º–∞** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –Ω–æ–º–µ—Ä–∞
        4. **–°–∫–∞—á–∞–π—Ç–µ** —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ PDF
        
        **–§—É–Ω–∫—Ü–∏–∏:**
        - –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
        - –†–µ–∑–µ—Ä–≤–Ω—ã–π OCR
        - –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        - –ù–∞–¥–µ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        """)

if __name__ == "__main__":
    main()
