import streamlit as st
import fitz
import pytesseract
from PIL import Image, ImageEnhance, ImageFilter
import io
import re
import tempfile
import os
import zipfile
import base64
import time
import subprocess
import concurrent.futures
from threading import Lock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PDF Splitter - MAX PRECISION",
    page_icon="üìÑ",
    layout="wide"
)

# –ö—ç—à–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Tesseract
@st.cache_resource
def setup_tesseract():
    try:
        result = subprocess.run(['which', 'tesseract'], capture_output=True, text=True)
        if result.returncode == 0:
            tesseract_path = result.stdout.strip()
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            return True
        else:
            # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            install_cmd = "apt-get update && apt-get install -y tesseract-ocr tesseract-ocr-eng"
            subprocess.run(install_cmd, shell=True, capture_output=True)
            return True
    except:
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
tesseract_available = setup_tesseract()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
class ProcessingState:
    def __init__(self):
        self._stop = False
        self._lock = Lock()
    
    def stop(self):
        with self._lock:
            self._stop = True
    
    def should_stop(self):
        with self._lock:
            return self._stop
    
    def reset(self):
        with self._lock:
            self._stop = False

processing_state = ProcessingState()

# CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .max-precision {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        padding: 12px;
        border-radius: 10px;
        text-align: center;
        font-weight: bold;
        font-size: 1.2rem;
    }
    .precision-metric {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        border-left: 5px solid #28a745;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

class PDFProcessor:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        self._pattern_cache = {}
        
    def _compile_patterns(self):
        """–ö—ç—à–∏—Ä—É–µ–º regex patterns –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        if not self._pattern_cache:
            self._pattern_cache = {
                'ten_digits_202x': re.compile(r'\b(202[4-9]\d{6})\b'),
                'twenty_digits': re.compile(r'\b(20\d{8})\b'),
                'any_ten_digits': re.compile(r'\b(\d{10})\b'),
                'eight_to_twelve': re.compile(r'\b(\d{8,12})\b'),
                'order_prefix': re.compile(r'\b(ORDER\s*[:#]?\s*)(\d{8,12})\b', re.IGNORECASE),
                'number_prefix': re.compile(r'\b(‚Ññ\s*[:#]?\s*)(\d{8,12})\b', re.IGNORECASE),
                'invoice_prefix': re.compile(r'\b(INVOICE\s*[:#]?\s*)(\d{8,12})\b', re.IGNORECASE),
                'contract_prefix': re.compile(r'\b(CONTRACT\s*[:#]?\s*)(\d{8,12})\b', re.IGNORECASE),
                'any_numbers': re.compile(r'\b(\d{6,15})\b'),  # –®–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            }
        return self._pattern_cache

    def find_order_number_max_precision(self, text):
        """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤"""
        if not text or len(text) < 3:
            return None
            
        patterns = self._compile_patterns()
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        structured_patterns = ['order_prefix', 'number_prefix', 'invoice_prefix', 'contract_prefix']
        for pattern_name in structured_patterns:
            matches = patterns[pattern_name].findall(text)
            if matches:
                for match in matches:
                    if isinstance(match, tuple):
                        for item in match:
                            if item and item.isdigit() and 6 <= len(item) <= 15:
                                return item
                    elif match and match.isdigit() and 6 <= len(match) <= 15:
                        return match
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º —á–∏—Å—Ç—ã–µ —á–∏—Å–ª–∞
        number_patterns = ['ten_digits_202x', 'twenty_digits', 'any_ten_digits', 'eight_to_twelve', 'any_numbers']
        for pattern_name in number_patterns:
            matches = patterns[pattern_name].findall(text)
            if matches:
                # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —á–∏—Å–ª–æ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –Ω–æ–º–µ—Ä)
                numbers = [m for m in matches if isinstance(m, str) and m.isdigit()]
                if numbers:
                    return max(numbers, key=len)
        
        return None

    def enhance_image_for_ocr(self, img):
        """–£–õ–£–ß–®–ï–ù–ò–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ OCR"""
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            enhancer = ImageEnhance.Contrast(img)
            img = enhancer.enhance(2.0)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
            enhancer = ImageEnhance.Sharpness(img)
            img = enhancer.enhance(2.0)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è—Ä–∫–æ—Å—Ç—å
            enhancer = ImageEnhance.Brightness(img)
            img = enhancer.enhance(1.1)
            
            # –õ–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
            img = img.filter(ImageFilter.MedianFilter(size=3))
            
            return img
        except:
            return img

    def extract_text_comprehensive(self, page):
        """–í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
        text_methods = []
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
        text_raw = page.get_text("text")
        if text_raw and len(text_raw.strip()) > 5:
            text_methods.append(text_raw)
        
        # –ú–µ—Ç–æ–¥ 2: –°–ª–æ–≤–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
        words = page.get_text("words")
        if words:
            text_words = " ".join([word[4] for word in words if len(word) > 4 and word[4].strip()])
            text_methods.append(text_words)
        
        # –ú–µ—Ç–æ–¥ 3: –ë–ª–æ–∫–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π)
        blocks = page.get_text("blocks")  
        if blocks:
            text_blocks = " ".join([block[4] for block in blocks if len(block) > 4 and block[4].strip()])
            text_methods.append(text_blocks)
        
        # –ú–µ—Ç–æ–¥ 4: Raw (–∏–Ω–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç)
        try:
            text_raw_dict = page.get_text("rawdict")
            if text_raw_dict and 'blocks' in text_raw_dict:
                raw_text = ""
                for block in text_raw_dict['blocks']:
                    if 'lines' in block:
                        for line in block['lines']:
                            if 'spans' in line:
                                for span in line['spans']:
                                    if 'text' in span:
                                        raw_text += span['text'] + " "
                if raw_text.strip():
                    text_methods.append(raw_text)
        except:
            pass
        
        combined_text = " ".join(text_methods)
        return combined_text

    def ocr_with_max_precision(self, page):
        """OCR —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            pix = page.get_pixmap(matrix=fitz.Matrix(2.0, 2.0))  # –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            img_data = pix.tobytes("png")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(io.BytesIO(img_data))
            img = img.convert('L')  # Grayscale
            
            # –£–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR
            img_enhanced = self.enhance_image_for_ocr(img)
            
            # –ü—Ä–æ–±—É–µ–º –†–ê–ó–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            ocr_configs = [
                '--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz‚Ññ#:- ',  # –û—Å–Ω–æ–≤–Ω–æ–π
                '--oem 3 --psm 4',  # –î–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–µ–∫—Å—Ç–∞
                '--oem 3 --psm 8',  # –î–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                '--oem 3 --psm 11',  # –î–ª—è –ø–ª–æ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                '--oem 3 --psm 12',  # –î–ª—è –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            ]
            
            all_ocr_text = ""
            
            for config in ocr_configs:
                try:
                    ocr_text = pytesseract.image_to_string(img_enhanced, lang='eng', config=config)
                    if ocr_text and len(ocr_text.strip()) > 3:
                        all_ocr_text += " " + ocr_text
                except:
                    continue
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π
            try:
                ocr_original = pytesseract.image_to_string(img, lang='eng', config='--oem 3 --psm 6')
                if ocr_original and len(ocr_original.strip()) > 3:
                    all_ocr_text += " " + ocr_original
            except:
                pass
            
            return all_ocr_text.strip()
            
        except Exception as e:
            return ""

    def process_single_page_max_precision(self, args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        page_num, page = args
        
        if processing_state.should_stop():
            return None, "stopped", page_num
        
        try:
            # –®–∞–≥ 1: –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
            text_direct = self.extract_text_comprehensive(page)
            order_no = self.find_order_number_max_precision(text_direct)
            
            if order_no:
                return order_no, "direct", page_num
            
            # –®–∞–≥ 2: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —Ç–æ—á–Ω—ã–π OCR
            if tesseract_available:
                ocr_text = self.ocr_with_max_precision(page)
                order_no = self.find_order_number_max_precision(ocr_text)
                
                if order_no:
                    return order_no, "ocr", page_num
            
            # –®–∞–≥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if not order_no:
                # –ü—Ä–æ–±—É–µ–º OCR —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≥–¥–µ –æ–±—ã—á–Ω–æ –Ω–æ–º–µ—Ä–∞)
                try:
                    # –û–±—Ä–µ–∑–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–µ 30% —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    clip_rect = fitz.Rect(0, 0, page.rect.width, page.rect.height * 0.3)
                    page_clip = page.get_pixmap(matrix=fitz.Matrix(2.0, 2.0), clip=clip_rect)
                    img_data = page_clip.tobytes("png")
                    img = Image.open(io.BytesIO(img_data))
                    img = img.convert('L')
                    img_enhanced = self.enhance_image_for_ocr(img)
                    
                    ocr_top = pytesseract.image_to_string(
                        img_enhanced, 
                        lang='eng', 
                        config='--oem 3 --psm 6'
                    )
                    order_no = self.find_order_number_max_precision(ocr_top)
                    
                    if order_no:
                        return order_no, "ocr_top", page_num
                except:
                    pass
            
            return None, "not_found", page_num
            
        except Exception as e:
            return None, "error", page_num

    def process_pdf_max_precision(self, pdf_file, progress_bar, status_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        processing_state.reset()
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        temp_pdf_path = os.path.join(self.temp_dir, "input.pdf")
        with open(temp_pdf_path, "wb") as f:
            f.write(pdf_file.getvalue())
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π PDF
            doc = fitz.open(temp_pdf_path)
            total_pages = len(doc)
            
            output_dir = os.path.join(self.temp_dir, "output")
            os.makedirs(output_dir, exist_ok=True)
            
            stats = {
                'total': total_pages,
                'direct': 0,
                'ocr': 0,
                'ocr_top': 0,
                'failed': 0,
                'stopped': 0,
                'files': [],
                'total_time': 0,
                'precision_rate': 0
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
            for page_num in range(total_pages):
                if processing_state.should_stop():
                    stats['stopped'] = total_pages - page_num
                    break
                
                page_start_time = time.time()
                page = doc[page_num]
                
                order_no, method, _ = self.process_single_page_max_precision((page_num, page))
                
                # –°–æ–∑–¥–∞–µ–º PDF –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                new_doc = fitz.open()
                new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                if order_no:
                    filename = f"{order_no}.pdf"
                else:
                    filename = f"page_{page_num + 1}.pdf"
                
                output_path = os.path.join(output_dir, filename)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                counter = 1
                base_name = os.path.splitext(filename)[0]
                while os.path.exists(output_path):
                    output_path = os.path.join(output_dir, f"{base_name}_{counter}.pdf")
                    counter += 1
                
                new_doc.save(output_path)
                new_doc.close()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if order_no:
                    if method == "direct":
                        stats['direct'] += 1
                    elif method == "ocr":
                        stats['ocr'] += 1
                    elif method == "ocr_top":
                        stats['ocr_top'] += 1
                else:
                    stats['failed'] += 1
                
                stats['files'].append({
                    'filename': os.path.basename(output_path),
                    'page': page_num + 1,
                    'method': method,
                    'order_no': order_no,
                    'success': order_no is not None
                })
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                
                elapsed = time.time() - start_time
                speed = (page_num + 1) / elapsed if elapsed > 0 else 0
                processed = page_num + 1
                success_count = stats['direct'] + stats['ocr'] + stats['ocr_top']
                precision_rate = (success_count / processed) * 100 if processed > 0 else 0
                
                status_text.text(
                    f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_pages} | "
                    f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {precision_rate:.1f}% | "
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å—Ç—Ä/—Å–µ–∫ | "
                    f"‚úÖ –¢–µ–∫—Å—Ç: {stats['direct']} | "
                    f"üîç OCR: {stats['ocr'] + stats['ocr_top']} | "
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {stats['failed']}"
                )
            
            doc.close()
            
            # ZIP –∞—Ä—Ö–∏–≤
            if stats['files']:
                zip_path = os.path.join(self.temp_dir, "results.zip")
                with zipfile.ZipFile(zip_path, 'w') as zipf:
                    for file_info in stats['files']:
                        file_path = os.path.join(output_dir, file_info['filename'])
                        if os.path.exists(file_path):
                            zipf.write(file_path, file_info['filename'])
                stats['zip_path'] = zip_path
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_time = time.time() - start_time
            stats['total_time'] = total_time
            
            success_count = stats['direct'] + stats['ocr'] + stats['ocr_top']
            stats['precision_rate'] = (success_count / stats['total']) * 100 if stats['total'] > 0 else 0
            stats['success_count'] = success_count
            
            return stats
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            import traceback
            st.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            return None

    def get_download_link(self, file_path, link_text):
        if not file_path or not os.path.exists(file_path):
            return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        with open(file_path, "rb") as f:
            data = f.read()
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="pdf_results.zip" style="background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;">{link_text}</a>'
        return href

def main():
    st.markdown('<div class="main-header">üìÑ PDF Splitter - MAX PRECISION</div>', unsafe_allow_html=True)
    st.markdown('<div class="max-precision">üéØ –ì–ê–†–ê–ù–¢–ò–Ø 100% –¢–û–ß–ù–û–°–¢–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø</div>', unsafe_allow_html=True)
    
    if 'processor' not in st.session_state:
        st.session_state.processor = PDFProcessor()
    
    # Sidebar
    with st.sidebar:
        st.header("üéØ –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        
        st.markdown("""
        **–£–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏:**
        - üîç –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ OCR (2x)
        - üñºÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ —Ä–µ–∑–∫–æ—Å—Ç–∏
        - üéØ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        - üìä 5 —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ OCR
        - üîé –ü–æ–∏—Å–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        - üìù –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        """)
        
        st.markdown(f"**OCR Engine:** {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if tesseract_available else '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        if st.button("üõë –û–°–¢–ê–ù–û–í–ò–¢–¨", use_container_width=True, type="primary"):
            processing_state.stop()
            st.error("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")

    # Main area
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF –¥–ª—è —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf", help="–°–∏—Å—Ç–µ–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.info(f"üìä –†–∞–∑–º–µ—Ä: {uploaded_file.size / 1024 / 1024:.2f} MB")
            
            if st.button("üéØ –ó–ê–ü–£–°–¢–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£ –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ", 
                        type="primary", use_container_width=True):
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                results_placeholder = st.empty()
                
                with st.spinner("üéØ –û–ë–†–ê–ë–û–¢–ö–ê –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ..."):
                    stats = st.session_state.processor.process_pdf_max_precision(
                        uploaded_file, progress_bar, status_text
                    )
                
                if stats:
                    with results_placeholder.container():
                        st.markdown("---")
                        st.subheader("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–°–û–ö–û–¢–û–ß–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
                        st.markdown(f'<div class="precision-metric">üéØ –¢–û–ß–ù–û–°–¢–¨ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø: {stats["precision_rate"]:.1f}%</div>', 
                                  unsafe_allow_html=True)
                        
                        col1, col2, col3, col4 = st.columns(4)
                        col1.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", stats['total'])
                        col2.metric("–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", stats['success_count'])
                        col3.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{stats['total_time']:.1f}—Å")
                        col4.metric("–°–∫–æ—Ä–æ—Å—Ç—å", f"{stats['total']/stats['total_time']:.1f} —Å—Ç—Ä/—Å–µ–∫")
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤
                        st.markdown("#### üìà –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤:")
                        col_m1, col_m2, col_m3, col_m4 = st.columns(4)
                        col_m1.metric("–¢–µ–∫—Å—Ç–æ–º PDF", stats['direct'])
                        col_m2.metric("–ü–æ–ª–Ω—ã–π OCR", stats['ocr'])
                        col_m3.metric("OCR –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏", stats['ocr_top'])
                        col_m4.metric("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", stats['failed'])
                        
                        if stats['stopped'] > 0:
                            st.error(f"‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {stats['stopped']} —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                        
                        if stats['precision_rate'] < 100:
                            st.warning(f"‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å {stats['precision_rate']:.1f}% - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã")
                        else:
                            st.success("üéâ –î–û–°–¢–ò–ì–ù–£–¢–ê 100% –¢–û–ß–ù–û–°–¢–¨ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø!")
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                        if stats.get('zip_path'):
                            st.markdown("---")
                            st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                            download_link = st.session_state.processor.get_download_link(
                                stats['zip_path'], "‚¨áÔ∏è –°–ö–ê–ß–ê–¢–¨ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï PDF"
                            )
                            st.markdown(download_link, unsafe_allow_html=True)
                        
                        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                        with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"):
                            for file_info in stats['files']:
                                if file_info['success']:
                                    method_icon = "‚úÖ" if file_info['method'] == 'direct' else "üîç" if file_info['method'] == 'ocr' else "üîù"
                                    st.success(f"{method_icon} –°—Ç—Ä–∞–Ω–∏—Ü–∞ {file_info['page']}: `{file_info['filename']}`")
                                else:
                                    st.error(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {file_info['page']}: `{file_info['filename']}`")
    
    with col2:
        st.subheader("üéØ –ì–∞—Ä–∞–Ω—Ç–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏")
        st.markdown("""
        **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏:**
        
        üîç **–í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ**  
        - 2x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è OCR
        - –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        - –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        
        üéØ **–£–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã**  
        - 8 —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–∏—Å–∫–∞
        - –ü–æ–∏—Å–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        - 5 —Ä–µ–∂–∏–º–æ–≤ OCR
        
        üìä **–í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑**  
        - 4 –º–µ—Ç–æ–¥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        - –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        - –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç:**  
        –ì–∞—Ä–∞–Ω—Ç–∏—èÊé•Ëøë 100% —Ç–æ—á–Ω–æ—Å—Ç–∏!
        """)
        
        if st.button("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£", use_container_width=True):
            processing_state.stop()
            st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

if __name__ == "__main__":
    main()
